


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           fputc
   13 00000000         
   14 00000000                 IMPORT           SystemInit  ; link to C code 
   15 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   16 00000000                 EXPORT           SVC_Handler
   17 00000000                 THUMB
   18 00000000                 PRESERVE8
   19 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   20 00000000         
   21 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   22 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   23 00000004         
   24 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   25 00000004         ;main
   26 00000004         ;MOV r0, #0xbeef
   27 00000004         ;BL PrintHex
   28 00000004         ;MOV r0, #0xf00d
   29 00000004         
   30 00000004         ;initialise process stack
   31 00000004         
   32 00000004 4982            LDR              r1, =0x20010000
   33 00000006 F381 8809       MSR              PSP, r1
   34 0000000A         
   35 0000000A         ;initialise baseId
   36 0000000A F04F 0000       MOV              r0, #0
   37 0000000E B401            push{r0}                     ;push main id
   38 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   39 00000012 B401            push{r0}                     ;push lastid
   40 00000014         
   41 00000014 487F            LDR              r0, =osrunning
   42 00000016 F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print
   43 0000001A         ;PUSH {r0}  
   44 0000001A         
   45 0000001A         ;MRS r1, MSP



ARM Macro Assembler    Page 2 


   46 0000001A         ;MOV r0, #0 
   47 0000001A         ; And re-print it on the terminal 
   48 0000001A F000 F878       BL               Mode_Switch
   49 0000001E         ;POP {r0} 
   50 0000001E         ; LDR r0, [r1]
   51 0000001E         ;BL PrintHex
   52 0000001E         ;LDR r0, =youlike 
   53 0000001E         ;BL PrintString 
   54 0000001E         ;MOV r0, #0 
   55 0000001E         ;BL Switch
   56 0000001E         ;BLX r0
   57 0000001E         ;MOV r0, #1
   58 0000001E         ;BL Switch
   59 0000001E         ;BLX r0
   60 0000001E         ;MOV r0, #4
   61 0000001E         ;BL Switch
   62 0000001E         ;BLX r0
   63 0000001E         ;MOV r0, #4
   64 0000001E         
   65 0000001E         ;MOV r2, #5 
   66 0000001E         ;MOV r7, #6
   67 0000001E         ;LDR r0, =osrunning
   68 0000001E         ;BL PrintString 
   69 0000001E         
   70 0000001E         ;MOV r2, #5 
   71 0000001E         ;LDR r0, =HelloWorld 
   72 0000001E         ;SVC 5
   73 0000001E         ;LDR r0, =HelloWorld 
   74 0000001E         ;SVC 5
   75 0000001E         ;LDR r0, =HelloWorld 
   76 0000001E         ;SVC 5
   77 0000001E         ;LDR r0, =osrunning
   78 0000001E         ;BL PrintString 
   79 0000001E         ;LDR r0, =osrunning
   80 0000001E         ;BL PrintString 
   81 0000001E         
   82 0000001E         
   83 0000001E         
   84 0000001E 497E            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   85 00000020         ;LDR r2, =ProcessTable 
   86 00000020 4B7E            LDR              r3, =ProcessTableEnd
   87 00000022         
   88 00000022         MainLoopStart
   89 00000022         
   90 00000022         ;LDR r0, [r2, r1, LSL #2]
   91 00000022 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   92 00000024         ;BLGT Err_ProcessOutOfRange; if we're at an invalid proc
                       ess id, error out
   93 00000024 DA04            BGE              MainLoopEnd ; if we're at the e
                                                            nd of the table, fi
                                                            nish 
   94 00000026 6808            LDR              r0, [r1]
   95 00000028 DF05            SVC              5
   96 0000002A F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            



ARM Macro Assembler    Page 3 


   97 0000002E E7F8            B                MainLoopStart
   98 00000030         MainLoopEnd
   99 00000030         
  100 00000030 487B            LDR              r0, =osfinishing
  101 00000032 DF04            SVC              4
  102 00000034         ;SVC 1
  103 00000034         ;SVC 2
  104 00000034         ;SVC 3
  105 00000034         ;SVC 1
  106 00000034         
  107 00000034         ;MOV r1, #0xbeef
  108 00000034         ;MOV r1, #0xbeef
  109 00000034         ;MOV r1, #0xbeef
  110 00000034 E089            B                Stop
  111 00000036         
  112 00000036         SVC_Handler
  113 00000036         ;MOV r0, #0xbeef
  114 00000036 B500            PUSH{lr}
  115 00000038         ;BL PrintHex
  116 00000038 4603            MOV              r3, r0
  117 0000003A         ;get SVC operand
  118 0000003A F01E 0F04       TST              lr, #4
  119 0000003E BF0C            ITE              eq          ; check which mode 
                                                            we came from
  120 00000040 F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
  121 00000044 F3EF 8009       MRSNE            r0, PSP
  122 00000048 6981            LDR              r1, [r0, #24] ; stacked PC
  123 0000004A F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
  124 0000004E         
  125 0000004E 4A75            LDR              r2, =SVCTable
  126 00000050 F852 0021       LDR              r0, [r2, r1, LSL #2]
  127 00000054 4974            LDR              r1, =SVCTableEnd
  128 00000056 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  129 00000058         ;PUSH{r0}
  130 00000058 BFC8 F000 
              F872             BLGT             Err_SVCOutOfRange
  131 0000005E 4601            MOV              r1, r0
  132 00000060 4618            MOV              r0, r3
  133 00000062 4788            BLX              r1
  134 00000064         
  135 00000064 F85D EB04       POP{lr}
  136 00000068         ;MOV r2, #4
  137 00000068         ;POP{r0}
  138 00000068         ;MOV r0, #42
  139 00000068         ;PUSH{r0}
  140 00000068 4770            BX               lr
  141 0000006A         
  142 0000006A         SVC_Kill
  143 0000006A BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  144 0000006C BC02            pop{r1}                      ;pop id counter
  145 0000006E BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away



ARM Macro Assembler    Page 4 


  146 00000070 4602            mov              r2, r0
  147 00000072 BC01            pop{r0}                      ; get current proce
                                                            ss stack pointer
  148 00000074 B402            push{r1}                     ; return id counter
                                                             to stack
  149 00000076 B404            push{r2}                     ;return lr
  150 00000078         ;we are now done with the main stack
  151 00000078         
  152 00000078         
  153 00000078         
  154 00000078         ;resume last process here
  155 00000078         
  156 00000078 E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi
                                                            sters
  157 0000007C         
  158 0000007C F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w
                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  159 00000080         
  160 00000080         ;normal recovery should now be in play
  161 00000080         
  162 00000080 4770            BX               lr
  163 00000082         
  164 00000082         ;create the process addressed by r0
  165 00000082         SVC_Create
  166 00000082         ;get lr saved by previous
  167 00000082 BC08            pop{r3}
  168 00000084         ;get the id
  169 00000084 BC02            pop{r1}
  170 00000086 F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id
  171 0000008A         
  172 0000008A         
  173 0000008A         ;work on the process stack
  174 0000008A F3EF 8209       MRS              r2, PSP
  175 0000008E         ;MOV r4, #0x5464
  176 0000008E E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  177 00000092         
  178 00000092         ;r5 is saved, so we can reuse it
  179 00000092 461D            MOV              r5, r3
  180 00000094         
  181 00000094 F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  182 00000098         ;put the final sp in r2 
  183 00000098 B404            push{r2}                     ;update it 
  184 0000009A         
  185 0000009A 4B5D            LDR              r3, =0x20010000
  186 0000009C         
  187 0000009C F44F 74FA       MOV              r4, #500



ARM Macro Assembler    Page 5 


  188 000000A0 FB04 F401       MUL              r4, r4, r1
  189 000000A4         
  190 000000A4 EB03 0204       ADD              r2, r3, r4
  191 000000A8         
  192 000000A8 B406            push{r1,         r2}         ;add my id and init
                                                            ial sp (this value 
                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`
  193 000000AA B402            push{r1}                     ;update the last id
                                                             value
  194 000000AC B420            push{r5}
  195 000000AE         ;we are now done with updating the main stack
  196 000000AE         
  197 000000AE         ;work on the process stack
  198 000000AE         
  199 000000AE         
  200 000000AE         
  201 000000AE         
  202 000000AE         ;at this point, 
  203 000000AE         ;0xFFFFFFFF default LR
  204 000000AE         ;0x01000000 default xPSR
  205 000000AE F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  206 000000B2 4605            MOV              r5, r0      ;put new pc in r5
  207 000000B4 F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  208 000000B8 4617            MOV              r7, r2
  209 000000BA         ;reset remaining main registers
  210 000000BA F04F 0001       MOV              r0, #1
  211 000000BE F04F 0102       MOV              r1, #2
  212 000000C2 F04F 0203       MOV              r2, #3
  213 000000C6 F04F 0300       MOV              r3, #0
  214 000000CA         
  215 000000CA         
  216 000000CA E927 0070       STMFD            r7!, {r6, r5, r4}
  217 000000CE         ; STMFD r7!, {r12, r6, r5, r4}
  218 000000CE E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  219 000000D2         ; STMFD r7!, {r0, r1, r2}
  220 000000D2 F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  221 000000D6         
  222 000000D6         ;reset all registers that won't be overwritten
  223 000000D6 F04F 0400       MOV              r4, #0
  224 000000DA F04F 0500       MOV              r5, #0
  225 000000DE F04F 0600       MOV              r6, #0
  226 000000E2 F04F 0700       MOV              r7, #0
  227 000000E6 F04F 0800       MOV              r8, #0
  228 000000EA F04F 0900       MOV              r9, #0
  229 000000EE F04F 0A00       MOV              r10, #0
  230 000000F2 F04F 0B00       MOV              r11, #0
  231 000000F6         
  232 000000F6         
  233 000000F6         ;return to our newly created process, via the SVC_Handle
                       r
  234 000000F6 4770            BX               lr
  235 000000F8         
  236 000000F8         Switch                               ;put the address of
                                                             the corresponding 



ARM Macro Assembler    Page 6 


                                                            process into r0
  237 000000F8         ;POP{r0}
  238 000000F8 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  239 000000FA 4A47            LDR              r2, =ProcessTable
  240 000000FC F852 0021       LDR              r0, [r2, r1, LSL #2]
  241 00000100 4946            LDR              r1, =ProcessTableEnd
  242 00000102 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  243 00000104         ;PUSH{r0}
  244 00000104 BFC8 F000 
              F818             BLGT             Err_ProcessOutOfRange
  245 0000010A 4770            BX               lr
  246 0000010C         
  247 0000010C         Start_Process                        ; ;use process addr
                                                            ess in r0, generate
                                                             id from data
  248 0000010C         
  249 0000010C         Resume_Process                       ; use the process i
                                                            d in r0 to resume t
                                                            he process
  250 0000010C         
  251 0000010C         ;BX pc
  252 0000010C         
  253 0000010C         Pause_Process                        ; use the process i
                                                            d in r0 to pause th
                                                            e current process
  254 0000010C         
  255 0000010C         ;BX lr
  256 0000010C         
  257 0000010C         Kill_Process                         ; use the process i
                                                            d in r0 to kill the
                                                             current process
  258 0000010C         
  259 0000010C 4770            BX               lr
  260 0000010E         
  261 0000010E         Mode_Switch
  262 0000010E F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  263 00000112 F380 8814       MSR              CONTROL, r0 ; do it 
  264 00000116 F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 
  265 0000011A         
  266 0000011A F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 
  267 0000011E         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  268 0000011E         ; above PSP change when using RVDS ISSM!! 
  269 0000011E F380 8814       MSR              CONTROL, r0
  270 00000122 F3BF 8F6F       ISB
  271 00000126 4770            BX               lr
  272 00000128         
  273 00000128         HelloWorld
  274 00000128 4840            LDR              r0, =helloworld
  275 0000012A DF04            SVC              4
  276 0000012C DF00            SVC              0
  277 0000012E         



ARM Macro Assembler    Page 7 


  278 0000012E         HelloMars
  279 0000012E 4840            LDR              r0, =hellomars
  280 00000130 DF04            SVC              4
  281 00000132 DF00            SVC              0
  282 00000134         
  283 00000134         HelloGalaxy
  284 00000134 483F            LDR              r0, =hellogalaxy
  285 00000136 DF04            SVC              4
  286 00000138 DF00            SVC              0
  287 0000013A         
  288 0000013A         Err_ProcessOutOfRange
  289 0000013A 483F            LDR              r0, =procoutofrangerr
  290 0000013C DF04            SVC              4
  291 0000013E F000 F804       BL               Stop
  292 00000142         
  293 00000142         Err_SVCOutOfRange
  294 00000142 483E            LDR              r0, =svcoutofrangerr
  295 00000144 DF04            SVC              4
  296 00000146 F000 F800       BL               Stop
  297 0000014A         
  298 0000014A         ; ================ 
  299 0000014A         ; End your program 
  300 0000014A         ; ================ 
  301 0000014A         Stop
  302 0000014A E7FE            B                Stop
  303 0000014C         
  304 0000014C         ; Declare some strings to be printed out 
  305 0000014C         ; These are constants and represent the data area 
  306 0000014C                 ALIGN
  307 0000014C         ProcessTable
  308 0000014C 00000000        DCD              HelloWorld
  309 00000150 00000000        DCD              HelloMars
  310 00000154 00000000        DCD              HelloGalaxy
  311 00000158         ProcessTableEnd
  312 00000158         
  313 00000158         SVCTable
  314 00000158 00000000        DCD              SVC_Kill
  315 0000015C 00000000        DCD              PrintHex
  316 00000160 00000000        DCD              HelloMars   ; FIXME, should be 
                                                            print decimal
  317 00000164 00000000        DCD              PrintChar
  318 00000168 00000000        DCD              PrintString
  319 0000016C 00000000        DCD              SVC_Create
  320 00000170         SVCTableEnd
  321 00000170         
  322 00000170         youlike
  323 00000170 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  324 0000017B         
  325 0000017B         osrunning
  326 0000017B 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  327 00000186         
  328 00000186         osfinishing
  329 00000186 47 6F 6F 



ARM Macro Assembler    Page 8 


              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  330 0000018F         
  331 0000018F         helloworld
  332 0000018F 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  333 0000019D         
  334 0000019D         hellomars
  335 0000019D 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0
  336 000001AA         
  337 000001AA         hellogalaxy
  338 000001AA 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  339 000001B9         
  340 000001B9         procoutofrangerr
  341 000001B9 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 
              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is
 out of range",0
  342 000001E5         
  343 000001E5         svcoutofrangerr
  344 000001E5 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 
              6E 67 65 
              00               DCB              "Error: requested SVC id is out
 of range",0
  345 0000020D 00 00 00        ALIGN



ARM Macro Assembler    Page 9 


  346 00000210         
  347 00000210         
  348 00000210                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas
e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 19 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 0000013A

Symbol: Err_ProcessOutOfRange
   Definitions
      At line 288 in file base.s
   Uses
      At line 244 in file base.s
Comment: Err_ProcessOutOfRange used once
Err_SVCOutOfRange 00000142

Symbol: Err_SVCOutOfRange
   Definitions
      At line 293 in file base.s
   Uses
      At line 130 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 00000134

Symbol: HelloGalaxy
   Definitions
      At line 283 in file base.s
   Uses
      At line 310 in file base.s
Comment: HelloGalaxy used once
HelloMars 0000012E

Symbol: HelloMars
   Definitions
      At line 278 in file base.s
   Uses
      At line 309 in file base.s
      At line 316 in file base.s

HelloWorld 00000128

Symbol: HelloWorld
   Definitions
      At line 273 in file base.s
   Uses
      At line 308 in file base.s
Comment: HelloWorld used once
Kill_Process 0000010C

Symbol: Kill_Process
   Definitions
      At line 257 in file base.s
   Uses
      None
Comment: Kill_Process unused
MainLoopEnd 00000030




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: MainLoopEnd
   Definitions
      At line 98 in file base.s
   Uses
      At line 93 in file base.s
Comment: MainLoopEnd used once
MainLoopStart 00000022

Symbol: MainLoopStart
   Definitions
      At line 88 in file base.s
   Uses
      At line 97 in file base.s
Comment: MainLoopStart used once
Mode_Switch 0000010E

Symbol: Mode_Switch
   Definitions
      At line 261 in file base.s
   Uses
      At line 48 in file base.s
Comment: Mode_Switch used once
Pause_Process 0000010C

Symbol: Pause_Process
   Definitions
      At line 253 in file base.s
   Uses
      None
Comment: Pause_Process unused
Printer 00000000

Symbol: Printer
   Definitions
      At line 5 in file base.s
   Uses
      None
Comment: Printer unused
ProcessTable 0000014C

Symbol: ProcessTable
   Definitions
      At line 307 in file base.s
   Uses
      At line 84 in file base.s
      At line 239 in file base.s

ProcessTableEnd 00000158

Symbol: ProcessTableEnd
   Definitions
      At line 311 in file base.s
   Uses
      At line 86 in file base.s
      At line 241 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 21 in file base.s
   Uses
      At line 15 in file base.s
Comment: Reset_Handler used once
Resume_Process 0000010C

Symbol: Resume_Process
   Definitions
      At line 249 in file base.s
   Uses
      None
Comment: Resume_Process unused
SVCTable 00000158

Symbol: SVCTable
   Definitions
      At line 313 in file base.s
   Uses
      At line 125 in file base.s
Comment: SVCTable used once
SVCTableEnd 00000170

Symbol: SVCTableEnd
   Definitions
      At line 320 in file base.s
   Uses
      At line 127 in file base.s
Comment: SVCTableEnd used once
SVC_Create 00000082

Symbol: SVC_Create
   Definitions
      At line 165 in file base.s
   Uses
      At line 319 in file base.s
Comment: SVC_Create used once
SVC_Handler 00000036

Symbol: SVC_Handler
   Definitions
      At line 112 in file base.s
   Uses
      At line 16 in file base.s
Comment: SVC_Handler used once
SVC_Kill 0000006A

Symbol: SVC_Kill
   Definitions
      At line 142 in file base.s
   Uses
      At line 314 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 24 in file base.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: Start unused
Start_Process 0000010C

Symbol: Start_Process
   Definitions
      At line 247 in file base.s
   Uses
      None
Comment: Start_Process unused
Stop 0000014A

Symbol: Stop
   Definitions
      At line 301 in file base.s
   Uses
      At line 110 in file base.s
      At line 291 in file base.s
      At line 296 in file base.s
      At line 302 in file base.s

Switch 000000F8

Symbol: Switch
   Definitions
      At line 236 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 000001AA

Symbol: hellogalaxy
   Definitions
      At line 337 in file base.s
   Uses
      At line 284 in file base.s
Comment: hellogalaxy used once
hellomars 0000019D

Symbol: hellomars
   Definitions
      At line 334 in file base.s
   Uses
      At line 279 in file base.s
Comment: hellomars used once
helloworld 0000018F

Symbol: helloworld
   Definitions
      At line 331 in file base.s
   Uses
      At line 274 in file base.s
Comment: helloworld used once
osfinishing 00000186

Symbol: osfinishing
   Definitions
      At line 328 in file base.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 100 in file base.s
Comment: osfinishing used once
osrunning 0000017B

Symbol: osrunning
   Definitions
      At line 325 in file base.s
   Uses
      At line 41 in file base.s
Comment: osrunning used once
procoutofrangerr 000001B9

Symbol: procoutofrangerr
   Definitions
      At line 340 in file base.s
   Uses
      At line 289 in file base.s
Comment: procoutofrangerr used once
svcoutofrangerr 000001E5

Symbol: svcoutofrangerr
   Definitions
      At line 343 in file base.s
   Uses
      At line 294 in file base.s
Comment: svcoutofrangerr used once
youlike 00000170

Symbol: youlike
   Definitions
      At line 322 in file base.s
   Uses
      None
Comment: youlike unused
33 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 317 in file base.s
Comment: PrintChar used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 315 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 42 in file base.s
      At line 318 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 14 in file base.s
   Uses
      At line 22 in file base.s
Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 12 in file base.s
   Uses
      None
Comment: fputc unused
6 symbols
374 symbols in table
