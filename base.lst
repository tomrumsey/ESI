


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           fputc
   13 00000000         
   14 00000000                 IMPORT           SystemInit  ; link to C code 
   15 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   16 00000000                 EXPORT           SVC_Handler
   17 00000000                 THUMB
   18 00000000                 PRESERVE8
   19 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   20 00000000         
   21 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   22 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   23 00000004         
   24 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   25 00000004         ;main
   26 00000004         
   27 00000004         ;initialise process stack 
   28 00000004 4982            LDR              r1, =0x20010000
   29 00000006 F381 8809       MSR              PSP, r1
   30 0000000A         
   31 0000000A         ;initialise baseId
   32 0000000A F04F 0000       MOV              r0, #0
   33 0000000E B401            push{r0}                     ;push main id
   34 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   35 00000012 B401            push{r0}                     ;push lastid
   36 00000014         
   37 00000014 487F            LDR              r0, =osrunning
   38 00000016 F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print
   39 0000001A         
   40 0000001A         ; And re-print it on the terminal 
   41 0000001A F000 F877       BL               Mode_Switch
   42 0000001E         
   43 0000001E         ;MOV r0, #50012
   44 0000001E         ;SVC 2
   45 0000001E         



ARM Macro Assembler    Page 2 


   46 0000001E 497E            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   47 00000020         ;LDR r2, =ProcessTable 
   48 00000020 4B7E            LDR              r3, =ProcessTableEnd
   49 00000022         
   50 00000022         MainLoopStart
   51 00000022         
   52 00000022         ;LDR r0, [r2, r1, LSL #2]
   53 00000022 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   54 00000024         ;BLGT Err_ProcessOutOfRange; if we're at an invalid proc
                       ess id, error out
   55 00000024 DA04            BGE              MainLoopEnd ; if we're at the e
                                                            nd of the table, fi
                                                            nish 
   56 00000026 6808            LDR              r0, [r1]
   57 00000028 DF05            SVC              5
   58 0000002A F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            
   59 0000002E E7F8            B                MainLoopStart
   60 00000030         MainLoopEnd
   61 00000030         
   62 00000030 487B            LDR              r0, =osfinishing
   63 00000032 DF04            SVC              4
   64 00000034         
   65 00000034 E088            B                Stop
   66 00000036         
   67 00000036         SVC_Handler
   68 00000036         ;MOV r0, #0xbeef
   69 00000036 B500            PUSH{lr}
   70 00000038         ;BL PrintHex
   71 00000038 4603            MOV              r3, r0
   72 0000003A         ;get SVC operand
   73 0000003A F01E 0F04       TST              lr, #4
   74 0000003E BF0C            ITE              eq          ; check which mode 
                                                            we came from
   75 00000040 F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
   76 00000044 F3EF 8009       MRSNE            r0, PSP
   77 00000048 6981            LDR              r1, [r0, #24] ; stacked PC
   78 0000004A F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
   79 0000004E         
   80 0000004E 4A75            LDR              r2, =SVCTable
   81 00000050 F852 0021       LDR              r0, [r2, r1, LSL #2]
   82 00000054 4974            LDR              r1, =SVCTableEnd
   83 00000056 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   84 00000058         ;PUSH{r0}
   85 00000058 BFC8 F000 
              F871             BLGT             Err_SVCOutOfRange
   86 0000005E 4601            MOV              r1, r0
   87 00000060 4618            MOV              r0, r3
   88 00000062 4788            BLX              r1
   89 00000064         



ARM Macro Assembler    Page 3 


   90 00000064 F85D EB04       POP{lr}
   91 00000068         ;MOV r2, #4
   92 00000068         ;POP{r0}
   93 00000068         ;MOV r0, #42
   94 00000068         ;PUSH{r0}
   95 00000068 4770            BX               lr
   96 0000006A         
   97 0000006A         SVC_Kill
   98 0000006A BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
   99 0000006C BC02            pop{r1}                      ;pop id counter
  100 0000006E BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away
  101 00000070 4602            mov              r2, r0
  102 00000072 BC01            pop{r0}                      ; get current proce
                                                            ss stack pointer
  103 00000074 B402            push{r1}                     ; return id counter
                                                             to stack
  104 00000076 B404            push{r2}                     ;return lr
  105 00000078         ;we are now done with the main stack 
  106 00000078         
  107 00000078         ;resume last process here
  108 00000078         
  109 00000078 E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi
                                                            sters
  110 0000007C         
  111 0000007C F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w
                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  112 00000080         
  113 00000080         ;normal recovery should now be in play
  114 00000080         
  115 00000080 4770            BX               lr
  116 00000082         
  117 00000082         ;create the process addressed by r0
  118 00000082         SVC_Create
  119 00000082         ;get lr saved by previous
  120 00000082 BC08            pop{r3}
  121 00000084         ;get the id
  122 00000084 BC02            pop{r1}
  123 00000086 F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id 
  124 0000008A         
  125 0000008A         ;work on the process stack
  126 0000008A F3EF 8209       MRS              r2, PSP
  127 0000008E         ;MOV r4, #0x5464
  128 0000008E E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  129 00000092         
  130 00000092         ;r5 is saved, so we can reuse it
  131 00000092 461D            MOV              r5, r3



ARM Macro Assembler    Page 4 


  132 00000094         
  133 00000094 F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  134 00000098         ;put the final sp in r2 
  135 00000098 B404            push{r2}                     ;update it 
  136 0000009A         
  137 0000009A 4B5D            LDR              r3, =0x20010000
  138 0000009C         
  139 0000009C F44F 74C8       MOV              r4, #400
  140 000000A0 FB04 F401       MUL              r4, r4, r1
  141 000000A4         
  142 000000A4 EB03 0204       ADD              r2, r3, r4
  143 000000A8         
  144 000000A8 B406            push{r1,         r2}         ;add my id and init
                                                            ial sp (this value 
                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`
  145 000000AA B402            push{r1}                     ;update the last id
                                                             value
  146 000000AC B420            push{r5}
  147 000000AE         ;we are now done with updating the main stack
  148 000000AE         
  149 000000AE         ;work on the process stack
  150 000000AE         
  151 000000AE         ;at this point, 
  152 000000AE         ;0xFFFFFFFF default LR
  153 000000AE         ;0x01000000 default xPSR
  154 000000AE F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  155 000000B2 4605            MOV              r5, r0      ;put new pc in r5
  156 000000B4 F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  157 000000B8 4617            MOV              r7, r2
  158 000000BA         ;reset remaining main registers
  159 000000BA F04F 0001       MOV              r0, #1
  160 000000BE F04F 0102       MOV              r1, #2
  161 000000C2 F04F 0203       MOV              r2, #3
  162 000000C6 F04F 0300       MOV              r3, #0
  163 000000CA         
  164 000000CA         
  165 000000CA E927 0070       STMFD            r7!, {r6, r5, r4}
  166 000000CE         ; STMFD r7!, {r12, r6, r5, r4}
  167 000000CE E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  168 000000D2         ; STMFD r7!, {r0, r1, r2}
  169 000000D2 F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  170 000000D6         
  171 000000D6         ;reset all registers that won't be overwritten
  172 000000D6 F04F 0400       MOV              r4, #0
  173 000000DA F04F 0500       MOV              r5, #0
  174 000000DE F04F 0600       MOV              r6, #0
  175 000000E2 F04F 0700       MOV              r7, #0
  176 000000E6 F04F 0800       MOV              r8, #0
  177 000000EA F04F 0900       MOV              r9, #0
  178 000000EE F04F 0A00       MOV              r10, #0
  179 000000F2 F04F 0B00       MOV              r11, #0



ARM Macro Assembler    Page 5 


  180 000000F6         
  181 000000F6         ;return to our newly created process, via the SVC_Handle
                       r
  182 000000F6 4770            BX               lr
  183 000000F8         
  184 000000F8         Switch                               ;put the address of
                                                             the corresponding 
                                                            process into r0
  185 000000F8         ;POP{r0}
  186 000000F8 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  187 000000FA 4A47            LDR              r2, =ProcessTable
  188 000000FC F852 0021       LDR              r0, [r2, r1, LSL #2]
  189 00000100 4946            LDR              r1, =ProcessTableEnd
  190 00000102 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  191 00000104         ;PUSH{r0}
  192 00000104 BFC8 F000 
              F817             BLGT             Err_ProcessOutOfRange
  193 0000010A 4770            BX               lr
  194 0000010C         
  195 0000010C         Mode_Switch
  196 0000010C F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  197 00000110 F380 8814       MSR              CONTROL, r0 ; do it 
  198 00000114 F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 
  199 00000118         
  200 00000118 F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 
  201 0000011C         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  202 0000011C         ; above PSP change when using RVDS ISSM!! 
  203 0000011C F380 8814       MSR              CONTROL, r0
  204 00000120 F3BF 8F6F       ISB
  205 00000124 4770            BX               lr
  206 00000126         
  207 00000126         HelloWorld
  208 00000126 4841            LDR              r0, =helloworld
  209 00000128 DF04            SVC              4
  210 0000012A DF00            SVC              0
  211 0000012C         
  212 0000012C         HelloMars
  213 0000012C 4840            LDR              r0, =hellomars
  214 0000012E DF04            SVC              4
  215 00000130 DF00            SVC              0
  216 00000132         
  217 00000132         HelloGalaxy
  218 00000132 4840            LDR              r0, =hellogalaxy
  219 00000134 DF04            SVC              4
  220 00000136 DF00            SVC              0
  221 00000138         
  222 00000138         Err_ProcessOutOfRange
  223 00000138 483F            LDR              r0, =procoutofrangerr
  224 0000013A DF04            SVC              4
  225 0000013C F000 F804       BL               Stop
  226 00000140         



ARM Macro Assembler    Page 6 


  227 00000140         Err_SVCOutOfRange
  228 00000140 483E            LDR              r0, =svcoutofrangerr
  229 00000142 DF04            SVC              4
  230 00000144 F000 F800       BL               Stop
  231 00000148         
  232 00000148         ; ================ 
  233 00000148         ; End your program 
  234 00000148         ; ================ 
  235 00000148         Stop
  236 00000148 E7FE            B                Stop
  237 0000014A         
  238 0000014A         ; Declare some strings to be printed out 
  239 0000014A         ; These are constants and represent the data area 
  240 0000014A 00 00           ALIGN
  241 0000014C         ProcessTable
  242 0000014C 00000000        DCD              HelloWorld
  243 00000150 00000000        DCD              HelloMars
  244 00000154 00000000        DCD              HelloGalaxy
  245 00000158         ProcessTableEnd
  246 00000158         
  247 00000158         SVCTable
  248 00000158 00000000        DCD              SVC_Kill
  249 0000015C 00000000        DCD              PrintHex
  250 00000160 00000000        DCD              HelloWorld  ; fixme
  251 00000164 00000000        DCD              PrintChar
  252 00000168 00000000        DCD              PrintString
  253 0000016C 00000000        DCD              SVC_Create
  254 00000170         SVCTableEnd
  255 00000170         
  256 00000170         youlike
  257 00000170 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  258 0000017B         
  259 0000017B         osrunning
  260 0000017B 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  261 00000186         
  262 00000186         osfinishing
  263 00000186 47 6F 6F 
              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  264 0000018F         
  265 0000018F         helloworld
  266 0000018F 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  267 0000019D         
  268 0000019D         hellomars
  269 0000019D 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0



ARM Macro Assembler    Page 7 


  270 000001AA         
  271 000001AA         hellogalaxy
  272 000001AA 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  273 000001B9         
  274 000001B9         procoutofrangerr
  275 000001B9 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 
              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is
 out of range",0
  276 000001E5         
  277 000001E5         svcoutofrangerr
  278 000001E5 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 
              6E 67 65 
              00               DCB              "Error: requested SVC id is out
 of range",0
  279 0000020D 00 00 00        ALIGN
  280 00000210         
  281 00000210         
  282 00000210                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 8 


              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas
e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 19 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 00000138

Symbol: Err_ProcessOutOfRange
   Definitions
      At line 222 in file base.s
   Uses
      At line 192 in file base.s
Comment: Err_ProcessOutOfRange used once
Err_SVCOutOfRange 00000140

Symbol: Err_SVCOutOfRange
   Definitions
      At line 227 in file base.s
   Uses
      At line 85 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 00000132

Symbol: HelloGalaxy
   Definitions
      At line 217 in file base.s
   Uses
      At line 244 in file base.s
Comment: HelloGalaxy used once
HelloMars 0000012C

Symbol: HelloMars
   Definitions
      At line 212 in file base.s
   Uses
      At line 243 in file base.s
Comment: HelloMars used once
HelloWorld 00000126

Symbol: HelloWorld
   Definitions
      At line 207 in file base.s
   Uses
      At line 242 in file base.s
      At line 250 in file base.s

MainLoopEnd 00000030

Symbol: MainLoopEnd
   Definitions
      At line 60 in file base.s
   Uses
      At line 55 in file base.s
Comment: MainLoopEnd used once
MainLoopStart 00000022




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: MainLoopStart
   Definitions
      At line 50 in file base.s
   Uses
      At line 59 in file base.s
Comment: MainLoopStart used once
Mode_Switch 0000010C

Symbol: Mode_Switch
   Definitions
      At line 195 in file base.s
   Uses
      At line 41 in file base.s
Comment: Mode_Switch used once
Printer 00000000

Symbol: Printer
   Definitions
      At line 5 in file base.s
   Uses
      None
Comment: Printer unused
ProcessTable 0000014C

Symbol: ProcessTable
   Definitions
      At line 241 in file base.s
   Uses
      At line 46 in file base.s
      At line 187 in file base.s

ProcessTableEnd 00000158

Symbol: ProcessTableEnd
   Definitions
      At line 245 in file base.s
   Uses
      At line 48 in file base.s
      At line 189 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 21 in file base.s
   Uses
      At line 15 in file base.s
Comment: Reset_Handler used once
SVCTable 00000158

Symbol: SVCTable
   Definitions
      At line 247 in file base.s
   Uses
      At line 80 in file base.s
Comment: SVCTable used once
SVCTableEnd 00000170

Symbol: SVCTableEnd



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 254 in file base.s
   Uses
      At line 82 in file base.s
Comment: SVCTableEnd used once
SVC_Create 00000082

Symbol: SVC_Create
   Definitions
      At line 118 in file base.s
   Uses
      At line 253 in file base.s
Comment: SVC_Create used once
SVC_Handler 00000036

Symbol: SVC_Handler
   Definitions
      At line 67 in file base.s
   Uses
      At line 16 in file base.s
Comment: SVC_Handler used once
SVC_Kill 0000006A

Symbol: SVC_Kill
   Definitions
      At line 97 in file base.s
   Uses
      At line 248 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 24 in file base.s
   Uses
      None
Comment: Start unused
Stop 00000148

Symbol: Stop
   Definitions
      At line 235 in file base.s
   Uses
      At line 65 in file base.s
      At line 225 in file base.s
      At line 230 in file base.s
      At line 236 in file base.s

Switch 000000F8

Symbol: Switch
   Definitions
      At line 184 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 000001AA

Symbol: hellogalaxy



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 271 in file base.s
   Uses
      At line 218 in file base.s
Comment: hellogalaxy used once
hellomars 0000019D

Symbol: hellomars
   Definitions
      At line 268 in file base.s
   Uses
      At line 213 in file base.s
Comment: hellomars used once
helloworld 0000018F

Symbol: helloworld
   Definitions
      At line 265 in file base.s
   Uses
      At line 208 in file base.s
Comment: helloworld used once
osfinishing 00000186

Symbol: osfinishing
   Definitions
      At line 262 in file base.s
   Uses
      At line 62 in file base.s
Comment: osfinishing used once
osrunning 0000017B

Symbol: osrunning
   Definitions
      At line 259 in file base.s
   Uses
      At line 37 in file base.s
Comment: osrunning used once
procoutofrangerr 000001B9

Symbol: procoutofrangerr
   Definitions
      At line 274 in file base.s
   Uses
      At line 223 in file base.s
Comment: procoutofrangerr used once
svcoutofrangerr 000001E5

Symbol: svcoutofrangerr
   Definitions
      At line 277 in file base.s
   Uses
      At line 228 in file base.s
Comment: svcoutofrangerr used once
youlike 00000170

Symbol: youlike
   Definitions
      At line 256 in file base.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: youlike unused
29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 251 in file base.s
Comment: PrintChar used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 249 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 38 in file base.s
      At line 252 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 14 in file base.s
   Uses
      At line 22 in file base.s
Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 12 in file base.s
   Uses
      None
Comment: fputc unused
6 symbols
370 symbols in table
