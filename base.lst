


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           fputc
   13 00000000                 IMPORT           PrintCharNoReturn
   14 00000000                 IMPORT           PrintStringNoReturn
   15 00000000         
   16 00000000                 IMPORT           SystemInit  ; link to C code 
   17 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   18 00000000                 EXPORT           SVC_Handler
   19 00000000                 THUMB
   20 00000000                 PRESERVE8
   21 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   22 00000000         
   23 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   24 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   25 00000004         
   26 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   27 00000004         ;main
   28 00000004         
   29 00000004         ;initialise process stack 
   30 00000004 49B1            LDR              r1, =0x20010000
   31 00000006 F381 8809       MSR              PSP, r1
   32 0000000A         
   33 0000000A         ;initialise baseId
   34 0000000A F04F 30FF       MOV              r0, #0xFFFFFFFF
   35 0000000E B401            push{r0}                     ;push main id
   36 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   37 00000012 B402            push{r1}                     ;push last stack as
                                                            signment
   38 00000014 B401            push{r0}                     ;push lastid
   39 00000016         
   40 00000016 F04F 0000       MOV              r0, #0      ;dummy print
   41 0000001A F7FF FFFE       BL               PrintChar
   42 0000001E         
   43 0000001E 48AC            LDR              r0, =osrunning
   44 00000020 F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print



ARM Macro Assembler    Page 2 


   45 00000024         
   46 00000024 F000 F8BB       BL               Mode_Switch
   47 00000028         
   48 00000028         ;MOV r0, #50012
   49 00000028         ;SVC 2
   50 00000028         ;SVC 6
   51 00000028         ;MOV r0, #0xFFFFFFFF
   52 00000028         ;SVC 2
   53 00000028         ;CreateProcessesInit
   54 00000028 49AA            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   55 0000002A         ;LDR r2, =ProcessTable 
   56 0000002A 4BAB            LDR              r3, =ProcessTableEnd
   57 0000002C         
   58 0000002C         CreateProcesses
   59 0000002C         
   60 0000002C         ;LDR r0, [r2, r1, LSL #2]
   61 0000002C 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   62 0000002E         
   63 0000002E DA07            BGE              CreateProcessesEnd ; if we're a
                                                            t the end of the ta
                                                            ble, finish 
   64 00000030 BFC8 F000 
              F8CA             BLGT             Err_ProcessOutOfRange ; if we'r
                                                            e at an invalid pro
                                                            cess id, error out
   65 00000036 6808            LDR              r0, [r1]
   66 00000038 DF05            SVC              5
   67 0000003A F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            
   68 0000003E E7F5            B                CreateProcesses
   69 00000040         CreateProcessesEnd
   70 00000040         
   71 00000040         
   72 00000040 F04F 30FF       MOV              r0, #0xFFFFFFFF
   73 00000044 DF00            SVC              0
   74 00000046         
   75 00000046         SVC_Handler
   76 00000046         ;MOV r0, #0xbeef
   77 00000046 B500            PUSH{lr}
   78 00000048         ;BL PrintHex
   79 00000048 4603            MOV              r3, r0
   80 0000004A         ;get SVC operand
   81 0000004A F01E 0F04       TST              lr, #4
   82 0000004E BF0C            ITE              eq          ; check which mode 
                                                            we came from
   83 00000050 F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
   84 00000054 F3EF 8009       MRSNE            r0, PSP
   85 00000058 6981            LDR              r1, [r0, #24] ; stacked PC
   86 0000005A F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
   87 0000005E         
   88 0000005E 4A9F            LDR              r2, =SVCTable
   89 00000060 F852 0021       LDR              r0, [r2, r1, LSL #2]
   90 00000064 499E            LDR              r1, =SVCTableEnd



ARM Macro Assembler    Page 3 


   91 00000066 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   92 00000068         ;PUSH{r0}
   93 00000068 BFA8 F000 
              F8B3             BLGE             Err_SVCOutOfRange
   94 0000006E 4601            MOV              r1, r0
   95 00000070 4618            MOV              r0, r3
   96 00000072 4788            BLX              r1
   97 00000074         
   98 00000074 F85D EB04       POP{lr}
   99 00000078         ;MOV r2, #4
  100 00000078         ;POP{r0}
  101 00000078         ;MOV r0, #42
  102 00000078         ;PUSH{r0}
  103 00000078 4770            BX               lr
  104 0000007A         
  105 0000007A         SVC_Kill
  106 0000007A F04F 31FF       MOV              r1, #0xFFFFFFFF
  107 0000007E 4288            CMP              r0, r1
  108 00000080 BF04 4898       LDREQ            r0, =osfinishing
  109 00000084 F7FF FFFE       BLEQ             PrintString
  110 00000088 BF08 F000 
              F8A8             BLEQ             Stop
  111 0000008E BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  112 00000090 BC02            pop{r1}                      ;pop id counter
  113 00000092 BC10            pop{r4}
  114 00000094 F5A4 74C8       SUB              r4, r4, #400
  115 00000098 BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away
  116 0000009A         
  117 0000009A 4603            mov              r3, r0
  118 0000009C F85D 9B04       pop{r9}                      ; get current proce
                                                            ss stack pointer
  119 000000A0 B410            push{r4}
  120 000000A2 B402            push{r1}                     ; return id counter
                                                             to stack
  121 000000A4 B408            push{r3}                     ;return lr
  122 000000A6         ;we are now done with the main stack 
  123 000000A6         
  124 000000A6         
  125 000000A6 4676            MOV              r6, lr
  126 000000A8 4614            MOV              r4, r2
  127 000000AA         
  128 000000AA 488F            LDR              r0, =svckillprocess
  129 000000AC F7FF FFFE       BL               PrintStringNoReturn
  130 000000B0 4620            MOV              r0, r4
  131 000000B2 F000 F84B       BL               PrintDecimal
  132 000000B6         ;normal recovery should now be in play
  133 000000B6 46B6            MOV              lr, r6
  134 000000B8         
  135 000000B8         ;resume last process here
  136 000000B8 4648            MOV              r0, r9
  137 000000BA E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi



ARM Macro Assembler    Page 4 


                                                            sters
  138 000000BE F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w
                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  139 000000C2 4770            BX               lr
  140 000000C4         
  141 000000C4         ;create the process addressed by r0
  142 000000C4         SVC_Create
  143 000000C4         ;get lr saved by previous
  144 000000C4 BC08            pop{r3}
  145 000000C6         ;get the id counter
  146 000000C6 BC02            pop{r1}
  147 000000C8 F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id 
  148 000000CC         
  149 000000CC         ;work on the process stack
  150 000000CC F3EF 8209       MRS              r2, PSP
  151 000000D0         ;MOV r4, #0x5464
  152 000000D0 E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  153 000000D4         
  154 000000D4         ;get the stack list
  155 000000D4 F85D 8B04       pop{r8}
  156 000000D8         
  157 000000D8         ;r6 is saved, so we can reuse it
  158 000000D8 461E            MOV              r6, r3
  159 000000DA         
  160 000000DA F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  161 000000DE         ;put the final sp in r2 
  162 000000DE B404            push{r2}                     ;update it 
  163 000000E0         
  164 000000E0 460C            MOV              r4, r1
  165 000000E2 4605            MOV              r5, r0      ;put new pc in r5
  166 000000E4 B500            push{lr}
  167 000000E6 4881            LDR              r0, =svccreateprocess
  168 000000E8 F7FF FFFE       BL               PrintStringNoReturn
  169 000000EC         
  170 000000EC 4620            MOV              r0, r4
  171 000000EE F000 F82D       BL               PrintDecimal
  172 000000F2         
  173 000000F2 F85D EB04       pop{lr}
  174 000000F6 4621            MOV              r1, r4
  175 000000F8         
  176 000000F8         
  177 000000F8         ;MOV r4, #400
  178 000000F8 F508 72C8       ADD              r2, r8, #400
  179 000000FC         
  180 000000FC         ;ADD r2, r3, r4
  181 000000FC         
  182 000000FC B412            push{r1,         r4}         ;add my id and init
                                                            ial sp (this value 



ARM Macro Assembler    Page 5 


                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`
  183 000000FE B404            push{r2}                     ; update the last s
                                                            tack value
  184 00000100 B402            push{r1}                     ;update the last id
                                                             value
  185 00000102 B440            push{r6}                     ;put the lr back
  186 00000104         ;we are now done with updating the main stack
  187 00000104         
  188 00000104         ;work on the process stack
  189 00000104         
  190 00000104         ;at this point, 
  191 00000104         ;0xFFFFFFFF default LR
  192 00000104         ;0x01000000 default xPSR
  193 00000104 F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  194 00000108         ;put new pc in r5 (see above)
  195 00000108 F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  196 0000010C 4617            MOV              r7, r2
  197 0000010E         ;reset remaining main registers
  198 0000010E F04F 0000       MOV              r0, #0
  199 00000112 F04F 0100       MOV              r1, #0
  200 00000116 F04F 0200       MOV              r2, #0
  201 0000011A F04F 0300       MOV              r3, #0
  202 0000011E         
  203 0000011E         
  204 0000011E E927 0070       STMFD            r7!, {r6, r5, r4}
  205 00000122         ; STMFD r7!, {r12, r6, r5, r4}
  206 00000122 E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  207 00000126         ; STMFD r7!, {r0, r1, r2}
  208 00000126 F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  209 0000012A         
  210 0000012A         ;reset all registers that won't be overwritten
  211 0000012A F04F 0400       MOV              r4, #0
  212 0000012E F04F 0500       MOV              r5, #0
  213 00000132 F04F 0600       MOV              r6, #0
  214 00000136 F04F 0700       MOV              r7, #0
  215 0000013A F04F 0800       MOV              r8, #0
  216 0000013E F04F 0900       MOV              r9, #0
  217 00000142 F04F 0A00       MOV              r10, #0
  218 00000146 F04F 0B00       MOV              r11, #0
  219 0000014A         
  220 0000014A         ;return to our newly created process, via the SVC_Handle
                       r
  221 0000014A 4770            BX               lr
  222 0000014C         
  223 0000014C         
  224 0000014C         PrintDecimal
  225 0000014C E92D 01D0       push{r4,         r6, r7, r8}
  226 00000150 F04F 020A       MOV              r2, #10
  227 00000154         
  228 00000154 466F            MOV              r7, sp      ;store original add
                                                            ress
  229 00000156         
  230 00000156         DecomposeStart
  231 00000156         



ARM Macro Assembler    Page 6 


  232 00000156         ;establish last deciaml digit
  233 00000156 FBB0 F8F2       UDIV             r8, r0, r2
  234 0000015A FB08 F402       MUL              r4, r8, r2  ;get r0-r0%10
  235 0000015E         ;subtract from origin number to get r0%10
  236 0000015E EBA0 0004       SUB              r0, r0, r4
  237 00000162         ;push it
  238 00000162 B401            push{r0}
  239 00000164         ;update r0 as r0/10
  240 00000164 4640            MOV              r0, r8      ;
  241 00000166         
  242 00000166         ;if r0 = 0, we are done
  243 00000166 2800            CMP              r0, #0
  244 00000168 D1F5            BNE              DecomposeStart
  245 0000016A         
  246 0000016A         DecomposeEnd
  247 0000016A 4676            MOV              r6, lr
  248 0000016C         ;Note: we are guaranteed the above pushed at least once.
                        This is convenient
  249 0000016C         DisplayStart
  250 0000016C BC01            pop{r0}
  251 0000016E F100 0030       ADD              r0, r0, #48
  252 00000172 F7FF FFFE       BL               PrintCharNoReturn ; TODO: updat
                                                            e with correct func
                                                            tion. Digits themse
                                                            lves are correct
  253 00000176 46E8            MOV              r8, sp
  254 00000178 4547            CMP              r7, r8
  255 0000017A D1F7            BNE              DisplayStart
  256 0000017C         DisplayEnd
  257 0000017C 485C            LDR              r0, =newline
  258 0000017E F7FF FFFE       BL               PrintString
  259 00000182 46B6            MOV              lr, r6
  260 00000184 E8BD 01D0       pop{r4,          r6, r7, r8}
  261 00000188 4770            BX               lr
  262 0000018A         
  263 0000018A         Switch                               ;put the address of
                                                             the corresponding 
                                                            process into r0
  264 0000018A         ;POP{r0}
  265 0000018A 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  266 0000018C 4A51            LDR              r2, =ProcessTable
  267 0000018E F852 0021       LDR              r0, [r2, r1, LSL #2]
  268 00000192 4951            LDR              r1, =ProcessTableEnd
  269 00000194 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  270 00000196         ;PUSH{r0}
  271 00000196 BFC8 F000 
              F817             BLGT             Err_ProcessOutOfRange
  272 0000019C 4770            BX               lr
  273 0000019E         
  274 0000019E         Mode_Switch
  275 0000019E F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  276 000001A2 F380 8814       MSR              CONTROL, r0 ; do it 
  277 000001A6 F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 



ARM Macro Assembler    Page 7 


  278 000001AA         
  279 000001AA F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 
  280 000001AE         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  281 000001AE         ; above PSP change when using RVDS ISSM!! 
  282 000001AE F380 8814       MSR              CONTROL, r0
  283 000001B2 F3BF 8F6F       ISB
  284 000001B6 4770            BX               lr
  285 000001B8         
  286 000001B8         HelloWorld
  287 000001B8 484E            LDR              r0, =helloworld
  288 000001BA DF04            SVC              4
  289 000001BC DF00            SVC              0
  290 000001BE         
  291 000001BE         HelloMars
  292 000001BE 484E            LDR              r0, =hellomars
  293 000001C0 DF04            SVC              4
  294 000001C2 DF00            SVC              0
  295 000001C4         
  296 000001C4         HelloGalaxy
  297 000001C4 484D            LDR              r0, =hellogalaxy
  298 000001C6 DF04            SVC              4
  299 000001C8 DF00            SVC              0
  300 000001CA         
  301 000001CA         Err_ProcessOutOfRange
  302 000001CA 484D            LDR              r0, =procoutofrangerr
  303 000001CC F7FF FFFE       BL               PrintString
  304 000001D0 F000 F805       BL               Stop
  305 000001D4         
  306 000001D4         
  307 000001D4         
  308 000001D4         Err_SVCOutOfRange
  309 000001D4 484B            LDR              r0, =svcoutofrangerr
  310 000001D6 F7FF FFFE       BL               PrintString
  311 000001DA F000 F800       BL               Stop
  312 000001DE         
  313 000001DE         ; ================ 
  314 000001DE         ; End your program 
  315 000001DE         ; ================ 
  316 000001DE         Stop
  317 000001DE E7FE            B                Stop
  318 000001E0         
  319 000001E0         ; Declare some strings to be printed out 
  320 000001E0         ; These are constants and represent the data area 
  321 000001E0                 ALIGN
  322 000001E0         ProcessTable
  323 000001E0 00000000        DCD              HelloWorld
  324 000001E4 00000000        DCD              HelloMars
  325 000001E8 00000000        DCD              HelloGalaxy
  326 000001EC         ProcessTableEnd
  327 000001EC         
  328 000001EC         SVCTable
  329 000001EC 00000000        DCD              SVC_Kill
  330 000001F0 00000000        DCD              PrintHex
  331 000001F4 00000000        DCD              PrintDecimal ; fixme
  332 000001F8 00000000        DCD              PrintChar
  333 000001FC 00000000        DCD              PrintString
  334 00000200 00000000        DCD              SVC_Create



ARM Macro Assembler    Page 8 


  335 00000204         SVCTableEnd
  336 00000204         
  337 00000204         youlike
  338 00000204 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  339 0000020F         
  340 0000020F         osrunning
  341 0000020F 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  342 0000021A         
  343 0000021A         osfinishing
  344 0000021A 47 6F 6F 
              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  345 00000223         
  346 00000223         helloworld
  347 00000223 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  348 00000231         
  349 00000231         newline
  350 00000231 00              DCB              "",0
  351 00000232         
  352 00000232         hellomars
  353 00000232 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0
  354 0000023F         
  355 0000023F         hellogalaxy
  356 0000023F 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  357 0000024E         
  358 0000024E         procoutofrangerr
  359 0000024E 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 
              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is



ARM Macro Assembler    Page 9 


 out of range",0
  360 0000027A         
  361 0000027A         svcoutofrangerr
  362 0000027A 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 
              6E 67 65 
              00               DCB              "Error: requested SVC id is out
 of range",0
  363 000002A2         
  364 000002A2         
  365 000002A2         svccreateprocess
  366 000002A2 43 72 65 
              61 74 69 
              6E 67 20 
              70 72 6F 
              63 65 73 
              73 20 23 
              00               DCB              "Creating process #",0
  367 000002B5 00 00 00        ALIGN
  368 000002B8         
  369 000002B8         svckillprocess
  370 000002B8 4B 69 6C 
              6C 69 6E 
              67 20 70 
              72 6F 63 
              65 73 73 
              20 23 00         DCB              "Killing process #",0
  371 000002CA 00 00           ALIGN
  372 000002CC         
  373 000002CC         
  374 000002CC                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas



ARM Macro Assembler    Page 10 


e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CreateProcesses 0000002C

Symbol: CreateProcesses
   Definitions
      At line 58 in file base.s
   Uses
      At line 68 in file base.s
Comment: CreateProcesses used once
CreateProcessesEnd 00000040

Symbol: CreateProcessesEnd
   Definitions
      At line 69 in file base.s
   Uses
      At line 63 in file base.s
Comment: CreateProcessesEnd used once
DecomposeEnd 0000016A

Symbol: DecomposeEnd
   Definitions
      At line 246 in file base.s
   Uses
      None
Comment: DecomposeEnd unused
DecomposeStart 00000156

Symbol: DecomposeStart
   Definitions
      At line 230 in file base.s
   Uses
      At line 244 in file base.s
Comment: DecomposeStart used once
DisplayEnd 0000017C

Symbol: DisplayEnd
   Definitions
      At line 256 in file base.s
   Uses
      None
Comment: DisplayEnd unused
DisplayStart 0000016C

Symbol: DisplayStart
   Definitions
      At line 249 in file base.s
   Uses
      At line 255 in file base.s
Comment: DisplayStart used once
ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 21 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 000001CA

Symbol: Err_ProcessOutOfRange



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 301 in file base.s
   Uses
      At line 64 in file base.s
      At line 271 in file base.s

Err_SVCOutOfRange 000001D4

Symbol: Err_SVCOutOfRange
   Definitions
      At line 308 in file base.s
   Uses
      At line 93 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 000001C4

Symbol: HelloGalaxy
   Definitions
      At line 296 in file base.s
   Uses
      At line 325 in file base.s
Comment: HelloGalaxy used once
HelloMars 000001BE

Symbol: HelloMars
   Definitions
      At line 291 in file base.s
   Uses
      At line 324 in file base.s
Comment: HelloMars used once
HelloWorld 000001B8

Symbol: HelloWorld
   Definitions
      At line 286 in file base.s
   Uses
      At line 323 in file base.s
Comment: HelloWorld used once
Mode_Switch 0000019E

Symbol: Mode_Switch
   Definitions
      At line 274 in file base.s
   Uses
      At line 46 in file base.s
Comment: Mode_Switch used once
PrintDecimal 0000014C

Symbol: PrintDecimal
   Definitions
      At line 224 in file base.s
   Uses
      At line 131 in file base.s
      At line 171 in file base.s
      At line 331 in file base.s

Printer 00000000

Symbol: Printer



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 5 in file base.s
   Uses
      None
Comment: Printer unused
ProcessTable 000001E0

Symbol: ProcessTable
   Definitions
      At line 322 in file base.s
   Uses
      At line 54 in file base.s
      At line 266 in file base.s

ProcessTableEnd 000001EC

Symbol: ProcessTableEnd
   Definitions
      At line 326 in file base.s
   Uses
      At line 56 in file base.s
      At line 268 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 23 in file base.s
   Uses
      At line 17 in file base.s
Comment: Reset_Handler used once
SVCTable 000001EC

Symbol: SVCTable
   Definitions
      At line 328 in file base.s
   Uses
      At line 88 in file base.s
Comment: SVCTable used once
SVCTableEnd 00000204

Symbol: SVCTableEnd
   Definitions
      At line 335 in file base.s
   Uses
      At line 90 in file base.s
Comment: SVCTableEnd used once
SVC_Create 000000C4

Symbol: SVC_Create
   Definitions
      At line 142 in file base.s
   Uses
      At line 334 in file base.s
Comment: SVC_Create used once
SVC_Handler 00000046

Symbol: SVC_Handler
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 75 in file base.s
   Uses
      At line 18 in file base.s
Comment: SVC_Handler used once
SVC_Kill 0000007A

Symbol: SVC_Kill
   Definitions
      At line 105 in file base.s
   Uses
      At line 329 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 26 in file base.s
   Uses
      None
Comment: Start unused
Stop 000001DE

Symbol: Stop
   Definitions
      At line 316 in file base.s
   Uses
      At line 110 in file base.s
      At line 304 in file base.s
      At line 311 in file base.s
      At line 317 in file base.s

Switch 0000018A

Symbol: Switch
   Definitions
      At line 263 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 0000023F

Symbol: hellogalaxy
   Definitions
      At line 355 in file base.s
   Uses
      At line 297 in file base.s
Comment: hellogalaxy used once
hellomars 00000232

Symbol: hellomars
   Definitions
      At line 352 in file base.s
   Uses
      At line 292 in file base.s
Comment: hellomars used once
helloworld 00000223

Symbol: helloworld
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 346 in file base.s
   Uses
      At line 287 in file base.s
Comment: helloworld used once
newline 00000231

Symbol: newline
   Definitions
      At line 349 in file base.s
   Uses
      At line 257 in file base.s
Comment: newline used once
osfinishing 0000021A

Symbol: osfinishing
   Definitions
      At line 343 in file base.s
   Uses
      At line 108 in file base.s
Comment: osfinishing used once
osrunning 0000020F

Symbol: osrunning
   Definitions
      At line 340 in file base.s
   Uses
      At line 43 in file base.s
Comment: osrunning used once
procoutofrangerr 0000024E

Symbol: procoutofrangerr
   Definitions
      At line 358 in file base.s
   Uses
      At line 302 in file base.s
Comment: procoutofrangerr used once
svccreateprocess 000002A2

Symbol: svccreateprocess
   Definitions
      At line 365 in file base.s
   Uses
      At line 167 in file base.s
Comment: svccreateprocess used once
svckillprocess 000002B8

Symbol: svckillprocess
   Definitions
      At line 369 in file base.s
   Uses
      At line 128 in file base.s
Comment: svckillprocess used once
svcoutofrangerr 0000027A

Symbol: svcoutofrangerr
   Definitions
      At line 361 in file base.s
   Uses
      At line 309 in file base.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: svcoutofrangerr used once
youlike 00000204

Symbol: youlike
   Definitions
      At line 337 in file base.s
   Uses
      None
Comment: youlike unused
37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 41 in file base.s
      At line 332 in file base.s

PrintCharNoReturn 00000000

Symbol: PrintCharNoReturn
   Definitions
      At line 13 in file base.s
   Uses
      At line 252 in file base.s
Comment: PrintCharNoReturn used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 330 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 44 in file base.s
      At line 109 in file base.s
      At line 258 in file base.s
      At line 303 in file base.s
      At line 310 in file base.s
      At line 333 in file base.s

PrintStringNoReturn 00000000

Symbol: PrintStringNoReturn
   Definitions
      At line 14 in file base.s
   Uses
      At line 129 in file base.s
      At line 168 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 16 in file base.s
   Uses
      At line 24 in file base.s
Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 12 in file base.s
   Uses
      None
Comment: fputc unused
8 symbols
380 symbols in table
