


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           PrintDecimal
   13 00000000                 IMPORT           fputc
   14 00000000         
   15 00000000                 IMPORT           SystemInit  ; link to C code 
   16 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   17 00000000                 EXPORT           SVC_Handler
   18 00000000                 THUMB
   19 00000000                 PRESERVE8
   20 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   21 00000000         
   22 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   23 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   24 00000004         
   25 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   26 00000004         ;main
   27 00000004         
   28 00000004         ;initialise process stack 
   29 00000004 4988            LDR              r1, =0x20010000
   30 00000006 F381 8809       MSR              PSP, r1
   31 0000000A         
   32 0000000A         ;initialise baseId
   33 0000000A F04F 0000       MOV              r0, #0
   34 0000000E B401            push{r0}                     ;push main id
   35 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   36 00000012 B401            push{r0}                     ;push lastid
   37 00000014 B401            push{r0}                     ;push lastid
   38 00000016         
   39 00000016 4885            LDR              r0, =osrunning
   40 00000018 F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print
   41 0000001C         
   42 0000001C         ; And re-print it on the terminal 
   43 0000001C F000 F883       BL               Mode_Switch
   44 00000020         
   45 00000020         ;test PrintDecimal



ARM Macro Assembler    Page 2 


   46 00000020         ;MOV r0, #50012
   47 00000020         ;SVC 2
   48 00000020         
   49 00000020 4983            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   50 00000022         ;LDR r2, =ProcessTable 
   51 00000022 4B84            LDR              r3, =ProcessTableEnd
   52 00000024         
   53 00000024         MainLoopStart
   54 00000024         
   55 00000024         ;LDR r0, [r2, r1, LSL #2]
   56 00000024 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   57 00000026         ;BLGT Err_ProcessOutOfRange; if we're at an invalid proc
                       ess id, error out
   58 00000026 DA04            BGE              MainLoopEnd ; if we're at the e
                                                            nd of the table, fi
                                                            nish 
   59 00000028 6808            LDR              r0, [r1]
   60 0000002A DF05            SVC              5
   61 0000002C F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            
   62 00000030 E7F8            B                MainLoopStart
   63 00000032         MainLoopEnd
   64 00000032         
   65 00000032 4881            LDR              r0, =osfinishing
   66 00000034 DF04            SVC              4
   67 00000036         
   68 00000036 E094            B                Stop
   69 00000038         
   70 00000038         SVC_Handler
   71 00000038         ;MOV r0, #0xbeef
   72 00000038 B500            PUSH{lr}
   73 0000003A B500            PUSH{lr}
   74 0000003C         ;BL PrintHex
   75 0000003C 4603            MOV              r3, r0
   76 0000003E         ;get SVC operand
   77 0000003E F01E 0F04       TST              lr, #4
   78 00000042 BF0C            ITE              eq          ; check which mode 
                                                            we came from
   79 00000044 F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
   80 00000048 F3EF 8009       MRSNE            r0, PSP
   81 0000004C 6981            LDR              r1, [r0, #24] ; stacked PC
   82 0000004E F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
   83 00000052         
   84 00000052 4A7A            LDR              r2, =SVCTable
   85 00000054 F852 0021       LDR              r0, [r2, r1, LSL #2]
   86 00000058 4979            LDR              r1, =SVCTableEnd
   87 0000005A 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   88 0000005C         ;PUSH{r0}
   89 0000005C BFC8 F000 
              F87C             BLGT             Err_SVCOutOfRange



ARM Macro Assembler    Page 3 


   90 00000062 4601            MOV              r1, r0
   91 00000064 4618            MOV              r0, r3
   92 00000066 4788            BLX              r1
   93 00000068         
   94 00000068 F85D EB04       POP{lr}
   95 0000006C F85D EB04       POP{lr}
   96 00000070         ;MOV r2, #4
   97 00000070         ;POP{r0}
   98 00000070         ;MOV r0, #42
   99 00000070         ;PUSH{r0}
  100 00000070 4770            BX               lr
  101 00000072         
  102 00000072         SVC_Kill
  103 00000072 BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  104 00000074 BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  105 00000076 BC02            pop{r1}                      ;pop id counter
  106 00000078 BC02            pop{r1}                      ;pop id counter
  107 0000007A BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away
  108 0000007C 4602            mov              r2, r0
  109 0000007E BC01            pop{r0}                      ; get current proce
                                                            ss stack pointer
  110 00000080 B401            push{r0}                     ; put it back so th
                                                            e stack is preserve
                                                            d
  111 00000082 B402            push{r1}                     ; return id counter
                                                             to stack
  112 00000084 B402            push{r1}                     ; return id counter
                                                             to stack
  113 00000086 B404            push{r2}                     ;return lr
  114 00000088 B404            push{r2}                     ;return lr
  115 0000008A         ;we are now done with the main stack 
  116 0000008A         
  117 0000008A         ;resume last process here
  118 0000008A         
  119 0000008A E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi
                                                            sters
  120 0000008E         
  121 0000008E F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w
                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  122 00000092         
  123 00000092         ;normal recovery should now be in play
  124 00000092         
  125 00000092 4770            BX               lr
  126 00000094         
  127 00000094         ;create the process addressed by r0
  128 00000094         SVC_Create
  129 00000094         ;get lr saved by previous
  130 00000094 BC08            pop{r3}
  131 00000096 BC08            pop{r3}
  132 00000098         ;get the id



ARM Macro Assembler    Page 4 


  133 00000098 BC02            pop{r1}
  134 0000009A BC02            pop{r1}
  135 0000009C F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id 
  136 000000A0         
  137 000000A0         ;work on the process stack
  138 000000A0 F3EF 8209       MRS              r2, PSP
  139 000000A4         ;MOV r4, #0x5464
  140 000000A4 E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  141 000000A8         
  142 000000A8         ;r5 is saved, so we can reuse it
  143 000000A8 461D            MOV              r5, r3
  144 000000AA         
  145 000000AA F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  146 000000AE         ;put the final sp in r2 
  147 000000AE B404            push{r2}                     ;update it 
  148 000000B0         
  149 000000B0 4B5D            LDR              r3, =0x20010000
  150 000000B2         
  151 000000B2 F44F 74C8       MOV              r4, #400
  152 000000B6 FB04 F401       MUL              r4, r4, r1
  153 000000BA         
  154 000000BA EB03 0204       ADD              r2, r3, r4
  155 000000BE         
  156 000000BE B406            push{r1,         r2}         ;add my id and init
                                                            ial sp (this value 
                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`
  157 000000C0 B402            push{r1}                     ;update the last id
                                                             value
  158 000000C2 B402            push{r1}
  159 000000C4 B420            push{r5}
  160 000000C6 B420            push{r5}
  161 000000C8         ;we are now done with updating the main stack
  162 000000C8         
  163 000000C8         ;work on the process stack
  164 000000C8         
  165 000000C8         ;at this point, 
  166 000000C8         ;0xFFFFFFFF default LR
  167 000000C8         ;0x01000000 default xPSR
  168 000000C8 F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  169 000000CC 4605            MOV              r5, r0      ;put new pc in r5
  170 000000CE F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  171 000000D2 4617            MOV              r7, r2
  172 000000D4         ;reset remaining main registers
  173 000000D4 F04F 0001       MOV              r0, #1
  174 000000D8 F04F 0102       MOV              r1, #2
  175 000000DC F04F 0203       MOV              r2, #3
  176 000000E0 F04F 0300       MOV              r3, #0



ARM Macro Assembler    Page 5 


  177 000000E4         
  178 000000E4         
  179 000000E4 E927 0070       STMFD            r7!, {r6, r5, r4}
  180 000000E8         ; STMFD r7!, {r12, r6, r5, r4}
  181 000000E8 E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  182 000000EC         ; STMFD r7!, {r0, r1, r2}
  183 000000EC F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  184 000000F0         
  185 000000F0         ;reset all registers that won't be overwritten
  186 000000F0 F04F 0400       MOV              r4, #0
  187 000000F4 F04F 0500       MOV              r5, #0
  188 000000F8 F04F 0600       MOV              r6, #0
  189 000000FC F04F 0700       MOV              r7, #0
  190 00000100 F04F 0800       MOV              r8, #0
  191 00000104 F04F 0900       MOV              r9, #0
  192 00000108 F04F 0A00       MOV              r10, #0
  193 0000010C F04F 0B00       MOV              r11, #0
  194 00000110         
  195 00000110         ;return to our newly created process, via the SVC_Handle
                       r
  196 00000110 4770            BX               lr
  197 00000112         
  198 00000112         Switch                               ;put the address of
                                                             the corresponding 
                                                            process into r0
  199 00000112         ;POP{r0}
  200 00000112 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  201 00000114 4A46            LDR              r2, =ProcessTable
  202 00000116 F852 0021       LDR              r0, [r2, r1, LSL #2]
  203 0000011A 4946            LDR              r1, =ProcessTableEnd
  204 0000011C 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  205 0000011E         ;PUSH{r0}
  206 0000011E BFC8 F000 
              F817             BLGT             Err_ProcessOutOfRange
  207 00000124 4770            BX               lr
  208 00000126         
  209 00000126         Mode_Switch
  210 00000126 F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  211 0000012A F380 8814       MSR              CONTROL, r0 ; do it 
  212 0000012E F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 
  213 00000132         
  214 00000132 F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 
  215 00000136         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  216 00000136         ; above PSP change when using RVDS ISSM!! 
  217 00000136 F380 8814       MSR              CONTROL, r0
  218 0000013A F3BF 8F6F       ISB
  219 0000013E 4770            BX               lr
  220 00000140         
  221 00000140         HelloWorld
  222 00000140 4840            LDR              r0, =helloworld



ARM Macro Assembler    Page 6 


  223 00000142 DF04            SVC              4
  224 00000144 DF00            SVC              0
  225 00000146         
  226 00000146         HelloMars
  227 00000146 4840            LDR              r0, =hellomars
  228 00000148 DF04            SVC              4
  229 0000014A DF00            SVC              0
  230 0000014C         
  231 0000014C         HelloGalaxy
  232 0000014C 483F            LDR              r0, =hellogalaxy
  233 0000014E DF04            SVC              4
  234 00000150 DF00            SVC              0
  235 00000152         
  236 00000152         Err_ProcessOutOfRange
  237 00000152 483F            LDR              r0, =procoutofrangerr
  238 00000154 DF04            SVC              4
  239 00000156 F000 F804       BL               Stop
  240 0000015A         
  241 0000015A         Err_SVCOutOfRange
  242 0000015A 483E            LDR              r0, =svcoutofrangerr
  243 0000015C DF04            SVC              4
  244 0000015E F000 F800       BL               Stop
  245 00000162         
  246 00000162         ; ================ 
  247 00000162         ; End your program 
  248 00000162         ; ================ 
  249 00000162         Stop
  250 00000162 E7FE            B                Stop
  251 00000164         
  252 00000164         ; Declare some strings to be printed out 
  253 00000164         ; These are constants and represent the data area 
  254 00000164                 ALIGN
  255 00000164         ProcessTable
  256 00000164 00000000        DCD              HelloWorld
  257 00000168 00000000        DCD              HelloMars
  258 0000016C 00000000        DCD              HelloGalaxy
  259 00000170         ProcessTableEnd
  260 00000170         
  261 00000170         SVCTable
  262 00000170 00000000        DCD              SVC_Kill
  263 00000174 00000000        DCD              PrintHex
  264 00000178 00000000        DCD              PrintDecimal
  265 0000017C 00000000        DCD              PrintChar
  266 00000180 00000000        DCD              PrintString
  267 00000184 00000000        DCD              SVC_Create
  268 00000188         SVCTableEnd
  269 00000188         
  270 00000188         youlike
  271 00000188 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  272 00000193         
  273 00000193         osrunning
  274 00000193 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  275 0000019E         



ARM Macro Assembler    Page 7 


  276 0000019E         osfinishing
  277 0000019E 47 6F 6F 
              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  278 000001A7         
  279 000001A7         helloworld
  280 000001A7 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  281 000001B5         
  282 000001B5         hellomars
  283 000001B5 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0
  284 000001C2         
  285 000001C2         hellogalaxy
  286 000001C2 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  287 000001D1         
  288 000001D1         procoutofrangerr
  289 000001D1 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 
              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is
 out of range",0
  290 000001FD         
  291 000001FD         svcoutofrangerr
  292 000001FD 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 
              6E 67 65 
              00               DCB              "Error: requested SVC id is out



ARM Macro Assembler    Page 8 


 of range",0
  293 00000225 00 00 00        ALIGN
  294 00000228         
  295 00000228         
  296 00000228                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas
e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 20 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 00000152

Symbol: Err_ProcessOutOfRange
   Definitions
      At line 236 in file base.s
   Uses
      At line 206 in file base.s
Comment: Err_ProcessOutOfRange used once
Err_SVCOutOfRange 0000015A

Symbol: Err_SVCOutOfRange
   Definitions
      At line 241 in file base.s
   Uses
      At line 89 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 0000014C

Symbol: HelloGalaxy
   Definitions
      At line 231 in file base.s
   Uses
      At line 258 in file base.s
Comment: HelloGalaxy used once
HelloMars 00000146

Symbol: HelloMars
   Definitions
      At line 226 in file base.s
   Uses
      At line 257 in file base.s
Comment: HelloMars used once
HelloWorld 00000140

Symbol: HelloWorld
   Definitions
      At line 221 in file base.s
   Uses
      At line 256 in file base.s
Comment: HelloWorld used once
MainLoopEnd 00000032

Symbol: MainLoopEnd
   Definitions
      At line 63 in file base.s
   Uses
      At line 58 in file base.s
Comment: MainLoopEnd used once
MainLoopStart 00000024

Symbol: MainLoopStart



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 53 in file base.s
   Uses
      At line 62 in file base.s
Comment: MainLoopStart used once
Mode_Switch 00000126

Symbol: Mode_Switch
   Definitions
      At line 209 in file base.s
   Uses
      At line 43 in file base.s
Comment: Mode_Switch used once
Printer 00000000

Symbol: Printer
   Definitions
      At line 5 in file base.s
   Uses
      None
Comment: Printer unused
ProcessTable 00000164

Symbol: ProcessTable
   Definitions
      At line 255 in file base.s
   Uses
      At line 49 in file base.s
      At line 201 in file base.s

ProcessTableEnd 00000170

Symbol: ProcessTableEnd
   Definitions
      At line 259 in file base.s
   Uses
      At line 51 in file base.s
      At line 203 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 22 in file base.s
   Uses
      At line 16 in file base.s
Comment: Reset_Handler used once
SVCTable 00000170

Symbol: SVCTable
   Definitions
      At line 261 in file base.s
   Uses
      At line 84 in file base.s
Comment: SVCTable used once
SVCTableEnd 00000188

Symbol: SVCTableEnd
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 268 in file base.s
   Uses
      At line 86 in file base.s
Comment: SVCTableEnd used once
SVC_Create 00000094

Symbol: SVC_Create
   Definitions
      At line 128 in file base.s
   Uses
      At line 267 in file base.s
Comment: SVC_Create used once
SVC_Handler 00000038

Symbol: SVC_Handler
   Definitions
      At line 70 in file base.s
   Uses
      At line 17 in file base.s
Comment: SVC_Handler used once
SVC_Kill 00000072

Symbol: SVC_Kill
   Definitions
      At line 102 in file base.s
   Uses
      At line 262 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 25 in file base.s
   Uses
      None
Comment: Start unused
Stop 00000162

Symbol: Stop
   Definitions
      At line 249 in file base.s
   Uses
      At line 68 in file base.s
      At line 239 in file base.s
      At line 244 in file base.s
      At line 250 in file base.s

Switch 00000112

Symbol: Switch
   Definitions
      At line 198 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 000001C2

Symbol: hellogalaxy
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 285 in file base.s
   Uses
      At line 232 in file base.s
Comment: hellogalaxy used once
hellomars 000001B5

Symbol: hellomars
   Definitions
      At line 282 in file base.s
   Uses
      At line 227 in file base.s
Comment: hellomars used once
helloworld 000001A7

Symbol: helloworld
   Definitions
      At line 279 in file base.s
   Uses
      At line 222 in file base.s
Comment: helloworld used once
osfinishing 0000019E

Symbol: osfinishing
   Definitions
      At line 276 in file base.s
   Uses
      At line 65 in file base.s
Comment: osfinishing used once
osrunning 00000193

Symbol: osrunning
   Definitions
      At line 273 in file base.s
   Uses
      At line 39 in file base.s
Comment: osrunning used once
procoutofrangerr 000001D1

Symbol: procoutofrangerr
   Definitions
      At line 288 in file base.s
   Uses
      At line 237 in file base.s
Comment: procoutofrangerr used once
svcoutofrangerr 000001FD

Symbol: svcoutofrangerr
   Definitions
      At line 291 in file base.s
   Uses
      At line 242 in file base.s
Comment: svcoutofrangerr used once
youlike 00000188

Symbol: youlike
   Definitions
      At line 270 in file base.s
   Uses
      None



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: youlike unused
29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 265 in file base.s
Comment: PrintChar used once
PrintDecimal 00000000

Symbol: PrintDecimal
   Definitions
      At line 12 in file base.s
   Uses
      At line 264 in file base.s
Comment: PrintDecimal used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 263 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 40 in file base.s
      At line 266 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 15 in file base.s
   Uses
      At line 23 in file base.s
Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 13 in file base.s
   Uses
      None
Comment: fputc unused
7 symbols
371 symbols in table
