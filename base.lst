


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           fputc
   13 00000000                 IMPORT           PrintCharNoReturn
   14 00000000                 IMPORT           PrintStringNoReturn
   15 00000000         
   16 00000000                 IMPORT           SystemInit  ; link to C code 
   17 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   18 00000000                 EXPORT           SVC_Handler
   19 00000000                 THUMB
   20 00000000                 PRESERVE8
   21 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   22 00000000         
   23 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   24 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   25 00000004         
   26 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   27 00000004         ;main
   28 00000004         
   29 00000004         ;initialise process stack 
   30 00000004 49AF            LDR              r1, =0x20010000
   31 00000006 F381 8809       MSR              PSP, r1
   32 0000000A         
   33 0000000A         ;initialise baseId
   34 0000000A F04F 30FF       MOV              r0, #0xFFFFFFFF
   35 0000000E B401            push{r0}                     ;push main id
   36 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   37 00000012 B402            push{r1}                     ;push last stack as
                                                            signment
   38 00000014 B401            push{r0}                     ;push lastid
   39 00000016         
   40 00000016 F04F 0000       MOV              r0, #0      ;dummy print
   41 0000001A F7FF FFFE       BL               PrintChar
   42 0000001E         
   43 0000001E 48AA            LDR              r0, =osrunning
   44 00000020 F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print



ARM Macro Assembler    Page 2 


   45 00000024         
   46 00000024 F000 F8B8       BL               Mode_Switch
   47 00000028         
   48 00000028         ;MOV r0, #50012
   49 00000028         ;SVC 2
   50 00000028         
   51 00000028         ;MOV r0, #0xFFFFFFFF
   52 00000028         ;SVC 2
   53 00000028         ;CreateProcessesInit
   54 00000028 49A8            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   55 0000002A         ;LDR r2, =ProcessTable 
   56 0000002A 4BA9            LDR              r3, =ProcessTableEnd
   57 0000002C         
   58 0000002C         CreateProcesses
   59 0000002C         
   60 0000002C         ;LDR r0, [r2, r1, LSL #2]
   61 0000002C 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   62 0000002E         ;BLGT Err_ProcessOutOfRange; if we're at an invalid proc
                       ess id, error out
   63 0000002E DA04            BGE              CreateProcessesEnd ; if we're a
                                                            t the end of the ta
                                                            ble, finish 
   64 00000030 6808            LDR              r0, [r1]
   65 00000032 DF05            SVC              5
   66 00000034 F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            
   67 00000038 E7F8            B                CreateProcesses
   68 0000003A         CreateProcessesEnd
   69 0000003A         
   70 0000003A         
   71 0000003A F04F 30FF       MOV              r0, #0xFFFFFFFF
   72 0000003E DF00            SVC              0
   73 00000040         
   74 00000040         SVC_Handler
   75 00000040         ;MOV r0, #0xbeef
   76 00000040 B500            PUSH{lr}
   77 00000042         ;BL PrintHex
   78 00000042 4603            MOV              r3, r0
   79 00000044         ;get SVC operand
   80 00000044 F01E 0F04       TST              lr, #4
   81 00000048 BF0C            ITE              eq          ; check which mode 
                                                            we came from
   82 0000004A F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
   83 0000004E F3EF 8009       MRSNE            r0, PSP
   84 00000052 6981            LDR              r1, [r0, #24] ; stacked PC
   85 00000054 F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
   86 00000058         
   87 00000058 4A9E            LDR              r2, =SVCTable
   88 0000005A F852 0021       LDR              r0, [r2, r1, LSL #2]
   89 0000005E 499E            LDR              r1, =SVCTableEnd
   90 00000060 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th



ARM Macro Assembler    Page 3 


                                                            e table
   91 00000062         ;PUSH{r0}
   92 00000062 BFC8 F000 
              F8B2             BLGT             Err_SVCOutOfRange
   93 00000068 4601            MOV              r1, r0
   94 0000006A 4618            MOV              r0, r3
   95 0000006C 4788            BLX              r1
   96 0000006E         
   97 0000006E F85D EB04       POP{lr}
   98 00000072         ;MOV r2, #4
   99 00000072         ;POP{r0}
  100 00000072         ;MOV r0, #42
  101 00000072         ;PUSH{r0}
  102 00000072 4770            BX               lr
  103 00000074         
  104 00000074         SVC_Kill
  105 00000074 F04F 31FF       MOV              r1, #0xFFFFFFFF
  106 00000078 4288            CMP              r0, r1
  107 0000007A BF04 4897       LDREQ            r0, =osfinishing
  108 0000007E F7FF FFFE       BLEQ             PrintString
  109 00000082 BF08 F000 
              F8A6             BLEQ             Stop
  110 00000088 BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  111 0000008A BC02            pop{r1}                      ;pop id counter
  112 0000008C BC10            pop{r4}
  113 0000008E F5A4 74C8       SUB              r4, r4, #400
  114 00000092 BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away
  115 00000094         
  116 00000094 4603            mov              r3, r0
  117 00000096 F85D 9B04       pop{r9}                      ; get current proce
                                                            ss stack pointer
  118 0000009A B410            push{r4}
  119 0000009C B402            push{r1}                     ; return id counter
                                                             to stack
  120 0000009E B408            push{r3}                     ;return lr
  121 000000A0         ;we are now done with the main stack 
  122 000000A0         
  123 000000A0         
  124 000000A0 4676            MOV              r6, lr
  125 000000A2 4614            MOV              r4, r2
  126 000000A4         
  127 000000A4 488E            LDR              r0, =svckillprocess
  128 000000A6 F7FF FFFE       BL               PrintStringNoReturn
  129 000000AA 4620            MOV              r0, r4
  130 000000AC F000 F84B       BL               PrintDecimal
  131 000000B0         ;normal recovery should now be in play
  132 000000B0 46B6            MOV              lr, r6
  133 000000B2         
  134 000000B2         ;resume last process here
  135 000000B2 4648            MOV              r0, r9
  136 000000B4 E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi
                                                            sters
  137 000000B8 F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w



ARM Macro Assembler    Page 4 


                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  138 000000BC 4770            BX               lr
  139 000000BE         
  140 000000BE         ;create the process addressed by r0
  141 000000BE         SVC_Create
  142 000000BE         ;get lr saved by previous
  143 000000BE BC08            pop{r3}
  144 000000C0         ;get the id counter
  145 000000C0 BC02            pop{r1}
  146 000000C2 F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id 
  147 000000C6         
  148 000000C6         ;work on the process stack
  149 000000C6 F3EF 8209       MRS              r2, PSP
  150 000000CA         ;MOV r4, #0x5464
  151 000000CA E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  152 000000CE         
  153 000000CE         ;get the stack list
  154 000000CE F85D 8B04       pop{r8}
  155 000000D2         
  156 000000D2         ;r6 is saved, so we can reuse it
  157 000000D2 461E            MOV              r6, r3
  158 000000D4         
  159 000000D4 F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  160 000000D8         ;put the final sp in r2 
  161 000000D8 B404            push{r2}                     ;update it 
  162 000000DA         
  163 000000DA 460C            MOV              r4, r1
  164 000000DC 4605            MOV              r5, r0      ;put new pc in r5
  165 000000DE B500            push{lr}
  166 000000E0 4880            LDR              r0, =svccreateprocess
  167 000000E2 F7FF FFFE       BL               PrintStringNoReturn
  168 000000E6         
  169 000000E6 4620            MOV              r0, r4
  170 000000E8 F000 F82D       BL               PrintDecimal
  171 000000EC         
  172 000000EC F85D EB04       pop{lr}
  173 000000F0 4621            MOV              r1, r4
  174 000000F2         
  175 000000F2         
  176 000000F2         ;MOV r4, #400
  177 000000F2 F508 72C8       ADD              r2, r8, #400
  178 000000F6         
  179 000000F6         ;ADD r2, r3, r4
  180 000000F6         
  181 000000F6 B412            push{r1,         r4}         ;add my id and init
                                                            ial sp (this value 
                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`



ARM Macro Assembler    Page 5 


  182 000000F8 B404            push{r2}                     ; update the last s
                                                            tack value
  183 000000FA B402            push{r1}                     ;update the last id
                                                             value
  184 000000FC B440            push{r6}                     ;put the lr back
  185 000000FE         ;we are now done with updating the main stack
  186 000000FE         
  187 000000FE         ;work on the process stack
  188 000000FE         
  189 000000FE         ;at this point, 
  190 000000FE         ;0xFFFFFFFF default LR
  191 000000FE         ;0x01000000 default xPSR
  192 000000FE F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  193 00000102         ;put new pc in r5 (see above)
  194 00000102 F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  195 00000106 4617            MOV              r7, r2
  196 00000108         ;reset remaining main registers
  197 00000108 F04F 0000       MOV              r0, #0
  198 0000010C F04F 0100       MOV              r1, #0
  199 00000110 F04F 0200       MOV              r2, #0
  200 00000114 F04F 0300       MOV              r3, #0
  201 00000118         
  202 00000118         
  203 00000118 E927 0070       STMFD            r7!, {r6, r5, r4}
  204 0000011C         ; STMFD r7!, {r12, r6, r5, r4}
  205 0000011C E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  206 00000120         ; STMFD r7!, {r0, r1, r2}
  207 00000120 F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  208 00000124         
  209 00000124         ;reset all registers that won't be overwritten
  210 00000124 F04F 0400       MOV              r4, #0
  211 00000128 F04F 0500       MOV              r5, #0
  212 0000012C F04F 0600       MOV              r6, #0
  213 00000130 F04F 0700       MOV              r7, #0
  214 00000134 F04F 0800       MOV              r8, #0
  215 00000138 F04F 0900       MOV              r9, #0
  216 0000013C F04F 0A00       MOV              r10, #0
  217 00000140 F04F 0B00       MOV              r11, #0
  218 00000144         
  219 00000144         ;return to our newly created process, via the SVC_Handle
                       r
  220 00000144 4770            BX               lr
  221 00000146         
  222 00000146         
  223 00000146         PrintDecimal
  224 00000146 E92D 01D0       push{r4,         r6, r7, r8}
  225 0000014A F04F 020A       MOV              r2, #10
  226 0000014E         
  227 0000014E 466F            MOV              r7, sp      ;store original add
                                                            ress
  228 00000150         
  229 00000150         DecomposeStart
  230 00000150         
  231 00000150         ;establish last deciaml digit
  232 00000150 FBB0 F8F2       UDIV             r8, r0, r2
  233 00000154 FB08 F402       MUL              r4, r8, r2  ;get r0-r0%10



ARM Macro Assembler    Page 6 


  234 00000158         ;subtract from origin number to get r0%10
  235 00000158 EBA0 0004       SUB              r0, r0, r4
  236 0000015C         ;push it
  237 0000015C B401            push{r0}
  238 0000015E         ;update r0 as r0/10
  239 0000015E 4640            MOV              r0, r8      ;
  240 00000160         
  241 00000160         ;if r0 = 0, we are done
  242 00000160 2800            CMP              r0, #0
  243 00000162 D1F5            BNE              DecomposeStart
  244 00000164         
  245 00000164         DecomposeEnd
  246 00000164 4676            MOV              r6, lr
  247 00000166         ;Note: we are guaranteed the above pushed at least once.
                        This is convenient
  248 00000166         DisplayStart
  249 00000166 BC01            pop{r0}
  250 00000168 F100 0030       ADD              r0, r0, #48
  251 0000016C F7FF FFFE       BL               PrintCharNoReturn ; TODO: updat
                                                            e with correct func
                                                            tion. Digits themse
                                                            lves are correct
  252 00000170 46E8            MOV              r8, sp
  253 00000172 4547            CMP              r7, r8
  254 00000174 D1F7            BNE              DisplayStart
  255 00000176         DisplayEnd
  256 00000176 485C            LDR              r0, =newline
  257 00000178 F7FF FFFE       BL               PrintString
  258 0000017C 46B6            MOV              lr, r6
  259 0000017E E8BD 01D0       pop{r4,          r6, r7, r8}
  260 00000182 4770            BX               lr
  261 00000184         
  262 00000184         Switch                               ;put the address of
                                                             the corresponding 
                                                            process into r0
  263 00000184         ;POP{r0}
  264 00000184 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  265 00000186 4A51            LDR              r2, =ProcessTable
  266 00000188 F852 0021       LDR              r0, [r2, r1, LSL #2]
  267 0000018C 4950            LDR              r1, =ProcessTableEnd
  268 0000018E 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  269 00000190         ;PUSH{r0}
  270 00000190 BFC8 F000 
              F817             BLGT             Err_ProcessOutOfRange
  271 00000196 4770            BX               lr
  272 00000198         
  273 00000198         Mode_Switch
  274 00000198 F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  275 0000019C F380 8814       MSR              CONTROL, r0 ; do it 
  276 000001A0 F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 
  277 000001A4         
  278 000001A4 F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 



ARM Macro Assembler    Page 7 


  279 000001A8         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  280 000001A8         ; above PSP change when using RVDS ISSM!! 
  281 000001A8 F380 8814       MSR              CONTROL, r0
  282 000001AC F3BF 8F6F       ISB
  283 000001B0 4770            BX               lr
  284 000001B2         
  285 000001B2         HelloWorld
  286 000001B2 484E            LDR              r0, =helloworld
  287 000001B4 DF04            SVC              4
  288 000001B6 DF00            SVC              0
  289 000001B8         
  290 000001B8         HelloMars
  291 000001B8 484D            LDR              r0, =hellomars
  292 000001BA DF04            SVC              4
  293 000001BC DF00            SVC              0
  294 000001BE         
  295 000001BE         HelloGalaxy
  296 000001BE 484D            LDR              r0, =hellogalaxy
  297 000001C0 DF04            SVC              4
  298 000001C2 DF00            SVC              0
  299 000001C4         
  300 000001C4         Err_ProcessOutOfRange
  301 000001C4 484C            LDR              r0, =procoutofrangerr
  302 000001C6 DF04            SVC              4
  303 000001C8 F000 F804       BL               Stop
  304 000001CC         
  305 000001CC         
  306 000001CC         
  307 000001CC         Err_SVCOutOfRange
  308 000001CC 484B            LDR              r0, =svcoutofrangerr
  309 000001CE DF04            SVC              4
  310 000001D0 F000 F800       BL               Stop
  311 000001D4         
  312 000001D4         ; ================ 
  313 000001D4         ; End your program 
  314 000001D4         ; ================ 
  315 000001D4         Stop
  316 000001D4 E7FE            B                Stop
  317 000001D6         
  318 000001D6         ; Declare some strings to be printed out 
  319 000001D6         ; These are constants and represent the data area 
  320 000001D6 00 00           ALIGN
  321 000001D8         ProcessTable
  322 000001D8 00000000        DCD              HelloWorld
  323 000001DC 00000000        DCD              HelloMars
  324 000001E0 00000000        DCD              HelloGalaxy
  325 000001E4         ProcessTableEnd
  326 000001E4         
  327 000001E4         SVCTable
  328 000001E4 00000000        DCD              SVC_Kill
  329 000001E8 00000000        DCD              PrintHex
  330 000001EC 00000000        DCD              PrintDecimal ; fixme
  331 000001F0 00000000        DCD              PrintChar
  332 000001F4 00000000        DCD              PrintString
  333 000001F8 00000000        DCD              SVC_Create
  334 000001FC         SVCTableEnd
  335 000001FC         
  336 000001FC         youlike



ARM Macro Assembler    Page 8 


  337 000001FC 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  338 00000207         
  339 00000207         osrunning
  340 00000207 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  341 00000212         
  342 00000212         osfinishing
  343 00000212 47 6F 6F 
              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  344 0000021B         
  345 0000021B         helloworld
  346 0000021B 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  347 00000229         
  348 00000229         newline
  349 00000229 00              DCB              "",0
  350 0000022A         
  351 0000022A         hellomars
  352 0000022A 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0
  353 00000237         
  354 00000237         hellogalaxy
  355 00000237 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  356 00000246         
  357 00000246         procoutofrangerr
  358 00000246 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 
              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is
 out of range",0
  359 00000272         
  360 00000272         svcoutofrangerr



ARM Macro Assembler    Page 9 


  361 00000272 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 
              6E 67 65 
              00               DCB              "Error: requested SVC id is out
 of range",0
  362 0000029A         
  363 0000029A         
  364 0000029A         svccreateprocess
  365 0000029A 43 72 65 
              61 74 69 
              6E 67 20 
              70 72 6F 
              63 65 73 
              73 20 23 
              00               DCB              "Creating process #",0
  366 000002AD 00 00 00        ALIGN
  367 000002B0         
  368 000002B0         svckillprocess
  369 000002B0 4B 69 6C 
              6C 69 6E 
              67 20 70 
              72 6F 63 
              65 73 73 
              20 23 00         DCB              "Killing process #",0
  370 000002C2 00 00           ALIGN
  371 000002C4         
  372 000002C4         
  373 000002C4                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas
e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CreateProcesses 0000002C

Symbol: CreateProcesses
   Definitions
      At line 58 in file base.s
   Uses
      At line 67 in file base.s
Comment: CreateProcesses used once
CreateProcessesEnd 0000003A

Symbol: CreateProcessesEnd
   Definitions
      At line 68 in file base.s
   Uses
      At line 63 in file base.s
Comment: CreateProcessesEnd used once
DecomposeEnd 00000164

Symbol: DecomposeEnd
   Definitions
      At line 245 in file base.s
   Uses
      None
Comment: DecomposeEnd unused
DecomposeStart 00000150

Symbol: DecomposeStart
   Definitions
      At line 229 in file base.s
   Uses
      At line 243 in file base.s
Comment: DecomposeStart used once
DisplayEnd 00000176

Symbol: DisplayEnd
   Definitions
      At line 255 in file base.s
   Uses
      None
Comment: DisplayEnd unused
DisplayStart 00000166

Symbol: DisplayStart
   Definitions
      At line 248 in file base.s
   Uses
      At line 254 in file base.s
Comment: DisplayStart used once
ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 21 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 000001C4

Symbol: Err_ProcessOutOfRange



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 300 in file base.s
   Uses
      At line 270 in file base.s
Comment: Err_ProcessOutOfRange used once
Err_SVCOutOfRange 000001CC

Symbol: Err_SVCOutOfRange
   Definitions
      At line 307 in file base.s
   Uses
      At line 92 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 000001BE

Symbol: HelloGalaxy
   Definitions
      At line 295 in file base.s
   Uses
      At line 324 in file base.s
Comment: HelloGalaxy used once
HelloMars 000001B8

Symbol: HelloMars
   Definitions
      At line 290 in file base.s
   Uses
      At line 323 in file base.s
Comment: HelloMars used once
HelloWorld 000001B2

Symbol: HelloWorld
   Definitions
      At line 285 in file base.s
   Uses
      At line 322 in file base.s
Comment: HelloWorld used once
Mode_Switch 00000198

Symbol: Mode_Switch
   Definitions
      At line 273 in file base.s
   Uses
      At line 46 in file base.s
Comment: Mode_Switch used once
PrintDecimal 00000146

Symbol: PrintDecimal
   Definitions
      At line 223 in file base.s
   Uses
      At line 130 in file base.s
      At line 170 in file base.s
      At line 330 in file base.s

Printer 00000000

Symbol: Printer
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 5 in file base.s
   Uses
      None
Comment: Printer unused
ProcessTable 000001D8

Symbol: ProcessTable
   Definitions
      At line 321 in file base.s
   Uses
      At line 54 in file base.s
      At line 265 in file base.s

ProcessTableEnd 000001E4

Symbol: ProcessTableEnd
   Definitions
      At line 325 in file base.s
   Uses
      At line 56 in file base.s
      At line 267 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 23 in file base.s
   Uses
      At line 17 in file base.s
Comment: Reset_Handler used once
SVCTable 000001E4

Symbol: SVCTable
   Definitions
      At line 327 in file base.s
   Uses
      At line 87 in file base.s
Comment: SVCTable used once
SVCTableEnd 000001FC

Symbol: SVCTableEnd
   Definitions
      At line 334 in file base.s
   Uses
      At line 89 in file base.s
Comment: SVCTableEnd used once
SVC_Create 000000BE

Symbol: SVC_Create
   Definitions
      At line 141 in file base.s
   Uses
      At line 333 in file base.s
Comment: SVC_Create used once
SVC_Handler 00000040

Symbol: SVC_Handler
   Definitions
      At line 74 in file base.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 18 in file base.s
Comment: SVC_Handler used once
SVC_Kill 00000074

Symbol: SVC_Kill
   Definitions
      At line 104 in file base.s
   Uses
      At line 328 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 26 in file base.s
   Uses
      None
Comment: Start unused
Stop 000001D4

Symbol: Stop
   Definitions
      At line 315 in file base.s
   Uses
      At line 109 in file base.s
      At line 303 in file base.s
      At line 310 in file base.s
      At line 316 in file base.s

Switch 00000184

Symbol: Switch
   Definitions
      At line 262 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 00000237

Symbol: hellogalaxy
   Definitions
      At line 354 in file base.s
   Uses
      At line 296 in file base.s
Comment: hellogalaxy used once
hellomars 0000022A

Symbol: hellomars
   Definitions
      At line 351 in file base.s
   Uses
      At line 291 in file base.s
Comment: hellomars used once
helloworld 0000021B

Symbol: helloworld
   Definitions
      At line 345 in file base.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 286 in file base.s
Comment: helloworld used once
newline 00000229

Symbol: newline
   Definitions
      At line 348 in file base.s
   Uses
      At line 256 in file base.s
Comment: newline used once
osfinishing 00000212

Symbol: osfinishing
   Definitions
      At line 342 in file base.s
   Uses
      At line 107 in file base.s
Comment: osfinishing used once
osrunning 00000207

Symbol: osrunning
   Definitions
      At line 339 in file base.s
   Uses
      At line 43 in file base.s
Comment: osrunning used once
procoutofrangerr 00000246

Symbol: procoutofrangerr
   Definitions
      At line 357 in file base.s
   Uses
      At line 301 in file base.s
Comment: procoutofrangerr used once
svccreateprocess 0000029A

Symbol: svccreateprocess
   Definitions
      At line 364 in file base.s
   Uses
      At line 166 in file base.s
Comment: svccreateprocess used once
svckillprocess 000002B0

Symbol: svckillprocess
   Definitions
      At line 368 in file base.s
   Uses
      At line 127 in file base.s
Comment: svckillprocess used once
svcoutofrangerr 00000272

Symbol: svcoutofrangerr
   Definitions
      At line 360 in file base.s
   Uses
      At line 308 in file base.s
Comment: svcoutofrangerr used once



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

youlike 000001FC

Symbol: youlike
   Definitions
      At line 336 in file base.s
   Uses
      None
Comment: youlike unused
37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 41 in file base.s
      At line 331 in file base.s

PrintCharNoReturn 00000000

Symbol: PrintCharNoReturn
   Definitions
      At line 13 in file base.s
   Uses
      At line 251 in file base.s
Comment: PrintCharNoReturn used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 329 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 44 in file base.s
      At line 108 in file base.s
      At line 257 in file base.s
      At line 332 in file base.s

PrintStringNoReturn 00000000

Symbol: PrintStringNoReturn
   Definitions
      At line 14 in file base.s
   Uses
      At line 128 in file base.s
      At line 167 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 16 in file base.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 24 in file base.s
Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 12 in file base.s
   Uses
      None
Comment: fputc unused
8 symbols
380 symbols in table
