


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           fputc
   13 00000000                 IMPORT           ITM_Write
   14 00000000         
   15 00000000                 IMPORT           SystemInit  ; link to C code 
   16 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   17 00000000                 EXPORT           SVC_Handler
   18 00000000                 THUMB
   19 00000000                 PRESERVE8
   20 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   21 00000000         
   22 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   23 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   24 00000004         
   25 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   26 00000004         ;main
   27 00000004         
   28 00000004         ;initialise process stack 
   29 00000004 498F            LDR              r1, =0x20010000
   30 00000006 F381 8809       MSR              PSP, r1
   31 0000000A         
   32 0000000A         ;initialise baseId
   33 0000000A F04F 0000       MOV              r0, #0
   34 0000000E B401            push{r0}                     ;push main id
   35 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   36 00000012 B401            push{r0}                     ;push lastid
   37 00000014         
   38 00000014 488C            LDR              r0, =osrunning
   39 00000016 F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print
   40 0000001A         
   41 0000001A         ; And re-print it on the terminal 
   42 0000001A F000 F892       BL               Mode_Switch
   43 0000001E         
   44 0000001E F24C 305C       MOV              r0, #50012
   45 00000022 DF02            SVC              2



ARM Macro Assembler    Page 2 


   46 00000024         
   47 00000024 4989            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   48 00000026         ;LDR r2, =ProcessTable 
   49 00000026 4B8A            LDR              r3, =ProcessTableEnd
   50 00000028         
   51 00000028         MainLoopStart
   52 00000028         
   53 00000028         ;LDR r0, [r2, r1, LSL #2]
   54 00000028 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   55 0000002A         ;BLGT Err_ProcessOutOfRange; if we're at an invalid proc
                       ess id, error out
   56 0000002A DA04            BGE              MainLoopEnd ; if we're at the e
                                                            nd of the table, fi
                                                            nish 
   57 0000002C 6808            LDR              r0, [r1]
   58 0000002E DF05            SVC              5
   59 00000030 F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            
   60 00000034 E7F8            B                MainLoopStart
   61 00000036         MainLoopEnd
   62 00000036         
   63 00000036 4887            LDR              r0, =osfinishing
   64 00000038 DF04            SVC              4
   65 0000003A         
   66 0000003A E0A0            B                Stop
   67 0000003C         
   68 0000003C         SVC_Handler
   69 0000003C         ;MOV r0, #0xbeef
   70 0000003C B500            PUSH{lr}
   71 0000003E         ;BL PrintHex
   72 0000003E 4603            MOV              r3, r0
   73 00000040         ;get SVC operand
   74 00000040 F01E 0F04       TST              lr, #4
   75 00000044 BF0C            ITE              eq          ; check which mode 
                                                            we came from
   76 00000046 F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
   77 0000004A F3EF 8009       MRSNE            r0, PSP
   78 0000004E 6981            LDR              r1, [r0, #24] ; stacked PC
   79 00000050 F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
   80 00000054         
   81 00000054 4A80            LDR              r2, =SVCTable
   82 00000056 F852 0021       LDR              r0, [r2, r1, LSL #2]
   83 0000005A 4980            LDR              r1, =SVCTableEnd
   84 0000005C 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   85 0000005E         ;PUSH{r0}
   86 0000005E BFC8 F000 
              F889             BLGT             Err_SVCOutOfRange
   87 00000064 4601            MOV              r1, r0
   88 00000066 4618            MOV              r0, r3
   89 00000068 4788            BLX              r1



ARM Macro Assembler    Page 3 


   90 0000006A         
   91 0000006A F85D EB04       POP{lr}
   92 0000006E         ;MOV r2, #4
   93 0000006E         ;POP{r0}
   94 0000006E         ;MOV r0, #42
   95 0000006E         ;PUSH{r0}
   96 0000006E 4770            BX               lr
   97 00000070         
   98 00000070         SVC_Kill
   99 00000070 BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  100 00000072 BC02            pop{r1}                      ;pop id counter
  101 00000074 BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away
  102 00000076 4602            mov              r2, r0
  103 00000078 BC01            pop{r0}                      ; get current proce
                                                            ss stack pointer
  104 0000007A B402            push{r1}                     ; return id counter
                                                             to stack
  105 0000007C B404            push{r2}                     ;return lr
  106 0000007E         ;we are now done with the main stack 
  107 0000007E         
  108 0000007E         ;resume last process here
  109 0000007E         
  110 0000007E E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi
                                                            sters
  111 00000082         
  112 00000082 F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w
                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  113 00000086         
  114 00000086         ;normal recovery should now be in play
  115 00000086         
  116 00000086 4770            BX               lr
  117 00000088         
  118 00000088         ;create the process addressed by r0
  119 00000088         SVC_Create
  120 00000088         ;get lr saved by previous
  121 00000088 BC08            pop{r3}
  122 0000008A         ;get the id
  123 0000008A BC02            pop{r1}
  124 0000008C F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id 
  125 00000090         
  126 00000090         ;work on the process stack
  127 00000090 F3EF 8209       MRS              r2, PSP
  128 00000094         ;MOV r4, #0x5464
  129 00000094 E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  130 00000098         
  131 00000098         ;r5 is saved, so we can reuse it



ARM Macro Assembler    Page 4 


  132 00000098 461D            MOV              r5, r3
  133 0000009A         
  134 0000009A F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  135 0000009E         ;put the final sp in r2 
  136 0000009E B404            push{r2}                     ;update it 
  137 000000A0         
  138 000000A0 4B68            LDR              r3, =0x20010000
  139 000000A2         
  140 000000A2 F44F 74C8       MOV              r4, #400
  141 000000A6 FB04 F401       MUL              r4, r4, r1
  142 000000AA         
  143 000000AA EB03 0204       ADD              r2, r3, r4
  144 000000AE         
  145 000000AE B406            push{r1,         r2}         ;add my id and init
                                                            ial sp (this value 
                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`
  146 000000B0 B402            push{r1}                     ;update the last id
                                                             value
  147 000000B2 B420            push{r5}
  148 000000B4         ;we are now done with updating the main stack
  149 000000B4         
  150 000000B4         ;work on the process stack
  151 000000B4         
  152 000000B4         ;at this point, 
  153 000000B4         ;0xFFFFFFFF default LR
  154 000000B4         ;0x01000000 default xPSR
  155 000000B4 F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  156 000000B8 4605            MOV              r5, r0      ;put new pc in r5
  157 000000BA F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  158 000000BE 4617            MOV              r7, r2
  159 000000C0         ;reset remaining main registers
  160 000000C0 F04F 0001       MOV              r0, #1
  161 000000C4 F04F 0102       MOV              r1, #2
  162 000000C8 F04F 0203       MOV              r2, #3
  163 000000CC F04F 0300       MOV              r3, #0
  164 000000D0         
  165 000000D0         
  166 000000D0 E927 0070       STMFD            r7!, {r6, r5, r4}
  167 000000D4         ; STMFD r7!, {r12, r6, r5, r4}
  168 000000D4 E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  169 000000D8         ; STMFD r7!, {r0, r1, r2}
  170 000000D8 F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  171 000000DC         
  172 000000DC         ;reset all registers that won't be overwritten
  173 000000DC F04F 0400       MOV              r4, #0
  174 000000E0 F04F 0500       MOV              r5, #0
  175 000000E4 F04F 0600       MOV              r6, #0
  176 000000E8 F04F 0700       MOV              r7, #0
  177 000000EC F04F 0800       MOV              r8, #0
  178 000000F0 F04F 0900       MOV              r9, #0
  179 000000F4 F04F 0A00       MOV              r10, #0



ARM Macro Assembler    Page 5 


  180 000000F8 F04F 0B00       MOV              r11, #0
  181 000000FC         
  182 000000FC         ;return to our newly created process, via the SVC_Handle
                       r
  183 000000FC 4770            BX               lr
  184 000000FE         
  185 000000FE         
  186 000000FE         PrintDecimal
  187 000000FE B410            push{r4}
  188 00000100 F04F 020A       MOV              r2, #10
  189 00000104         
  190 00000104 466B            MOV              r3, sp      ;store original add
                                                            ress
  191 00000106         
  192 00000106         DecomposeStart
  193 00000106         
  194 00000106         ;establish last deciaml digit
  195 00000106 FBB0 F1F2       UDIV             r1, r0, r2
  196 0000010A FB01 F402       MUL              r4, r1, r2  ;get r0-r0%10
  197 0000010E         ;subtract from origin number to get r0%10
  198 0000010E EBA0 0004       SUB              r0, r0, r4
  199 00000112         ;push it
  200 00000112 B401            push{r0}
  201 00000114         ;update r0 as r0/10
  202 00000114 4608            MOV              r0, r1      ;
  203 00000116         
  204 00000116         ;if r0 = 0, we are done
  205 00000116 2800            CMP              r0, #0
  206 00000118 D1F5            BNE              DecomposeStart
  207 0000011A         
  208 0000011A         DecomposeEnd
  209 0000011A 4674            MOV              r4, lr
  210 0000011C         ;Note: we are guaranteed the above pushed at least once.
                        This is convenient
  211 0000011C         DisplayStart
  212 0000011C BC01            pop{r0}
  213 0000011E F7FF FFFE       BL               ITM_Write
  214 00000122 4669            MOV              r1, sp
  215 00000124 428B            CMP              r3, r1
  216 00000126 D1F9            BNE              DisplayStart
  217 00000128         DisplayEnd
  218 00000128 46A6            MOV              lr, r4
  219 0000012A BC10            pop{r4}
  220 0000012C 4770            BX               lr
  221 0000012E         
  222 0000012E         Switch                               ;put the address of
                                                             the corresponding 
                                                            process into r0
  223 0000012E         ;POP{r0}
  224 0000012E 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  225 00000130 4A46            LDR              r2, =ProcessTable
  226 00000132 F852 0021       LDR              r0, [r2, r1, LSL #2]
  227 00000136 4946            LDR              r1, =ProcessTableEnd
  228 00000138 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  229 0000013A         ;PUSH{r0}



ARM Macro Assembler    Page 6 


  230 0000013A BFC8 F000 
              F817             BLGT             Err_ProcessOutOfRange
  231 00000140 4770            BX               lr
  232 00000142         
  233 00000142         Mode_Switch
  234 00000142 F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  235 00000146 F380 8814       MSR              CONTROL, r0 ; do it 
  236 0000014A F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 
  237 0000014E         
  238 0000014E F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 
  239 00000152         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  240 00000152         ; above PSP change when using RVDS ISSM!! 
  241 00000152 F380 8814       MSR              CONTROL, r0
  242 00000156 F3BF 8F6F       ISB
  243 0000015A 4770            BX               lr
  244 0000015C         
  245 0000015C         HelloWorld
  246 0000015C 4840            LDR              r0, =helloworld
  247 0000015E DF04            SVC              4
  248 00000160 DF00            SVC              0
  249 00000162         
  250 00000162         HelloMars
  251 00000162 4840            LDR              r0, =hellomars
  252 00000164 DF04            SVC              4
  253 00000166 DF00            SVC              0
  254 00000168         
  255 00000168         HelloGalaxy
  256 00000168 483F            LDR              r0, =hellogalaxy
  257 0000016A DF04            SVC              4
  258 0000016C DF00            SVC              0
  259 0000016E         
  260 0000016E         Err_ProcessOutOfRange
  261 0000016E 483F            LDR              r0, =procoutofrangerr
  262 00000170 DF04            SVC              4
  263 00000172 F000 F804       BL               Stop
  264 00000176         
  265 00000176         
  266 00000176         
  267 00000176         Err_SVCOutOfRange
  268 00000176 483E            LDR              r0, =svcoutofrangerr
  269 00000178 DF04            SVC              4
  270 0000017A F000 F800       BL               Stop
  271 0000017E         
  272 0000017E         ; ================ 
  273 0000017E         ; End your program 
  274 0000017E         ; ================ 
  275 0000017E         Stop
  276 0000017E E7FE            B                Stop
  277 00000180         
  278 00000180         ; Declare some strings to be printed out 
  279 00000180         ; These are constants and represent the data area 
  280 00000180                 ALIGN
  281 00000180         ProcessTable
  282 00000180 00000000        DCD              HelloWorld
  283 00000184 00000000        DCD              HelloMars



ARM Macro Assembler    Page 7 


  284 00000188 00000000        DCD              HelloGalaxy
  285 0000018C         ProcessTableEnd
  286 0000018C         
  287 0000018C         SVCTable
  288 0000018C 00000000        DCD              SVC_Kill
  289 00000190 00000000        DCD              PrintHex
  290 00000194 00000000        DCD              PrintDecimal ; fixme
  291 00000198 00000000        DCD              PrintChar
  292 0000019C 00000000        DCD              PrintString
  293 000001A0 00000000        DCD              SVC_Create
  294 000001A4         SVCTableEnd
  295 000001A4         
  296 000001A4         youlike
  297 000001A4 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  298 000001AF         
  299 000001AF         osrunning
  300 000001AF 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  301 000001BA         
  302 000001BA         osfinishing
  303 000001BA 47 6F 6F 
              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  304 000001C3         
  305 000001C3         helloworld
  306 000001C3 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  307 000001D1         
  308 000001D1         hellomars
  309 000001D1 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0
  310 000001DE         
  311 000001DE         hellogalaxy
  312 000001DE 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  313 000001ED         
  314 000001ED         procoutofrangerr
  315 000001ED 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 



ARM Macro Assembler    Page 8 


              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is
 out of range",0
  316 00000219         
  317 00000219         svcoutofrangerr
  318 00000219 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 
              6E 67 65 
              00               DCB              "Error: requested SVC id is out
 of range",0
  319 00000241 00 00 00        ALIGN
  320 00000244         
  321 00000244         
  322 00000244                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas
e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DecomposeEnd 0000011A

Symbol: DecomposeEnd
   Definitions
      At line 208 in file base.s
   Uses
      None
Comment: DecomposeEnd unused
DecomposeStart 00000106

Symbol: DecomposeStart
   Definitions
      At line 192 in file base.s
   Uses
      At line 206 in file base.s
Comment: DecomposeStart used once
DisplayEnd 00000128

Symbol: DisplayEnd
   Definitions
      At line 217 in file base.s
   Uses
      None
Comment: DisplayEnd unused
DisplayStart 0000011C

Symbol: DisplayStart
   Definitions
      At line 211 in file base.s
   Uses
      At line 216 in file base.s
Comment: DisplayStart used once
ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 20 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 0000016E

Symbol: Err_ProcessOutOfRange
   Definitions
      At line 260 in file base.s
   Uses
      At line 230 in file base.s
Comment: Err_ProcessOutOfRange used once
Err_SVCOutOfRange 00000176

Symbol: Err_SVCOutOfRange
   Definitions
      At line 267 in file base.s
   Uses
      At line 86 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 00000168

Symbol: HelloGalaxy



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 255 in file base.s
   Uses
      At line 284 in file base.s
Comment: HelloGalaxy used once
HelloMars 00000162

Symbol: HelloMars
   Definitions
      At line 250 in file base.s
   Uses
      At line 283 in file base.s
Comment: HelloMars used once
HelloWorld 0000015C

Symbol: HelloWorld
   Definitions
      At line 245 in file base.s
   Uses
      At line 282 in file base.s
Comment: HelloWorld used once
MainLoopEnd 00000036

Symbol: MainLoopEnd
   Definitions
      At line 61 in file base.s
   Uses
      At line 56 in file base.s
Comment: MainLoopEnd used once
MainLoopStart 00000028

Symbol: MainLoopStart
   Definitions
      At line 51 in file base.s
   Uses
      At line 60 in file base.s
Comment: MainLoopStart used once
Mode_Switch 00000142

Symbol: Mode_Switch
   Definitions
      At line 233 in file base.s
   Uses
      At line 42 in file base.s
Comment: Mode_Switch used once
PrintDecimal 000000FE

Symbol: PrintDecimal
   Definitions
      At line 186 in file base.s
   Uses
      At line 290 in file base.s
Comment: PrintDecimal used once
Printer 00000000

Symbol: Printer
   Definitions
      At line 5 in file base.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: Printer unused
ProcessTable 00000180

Symbol: ProcessTable
   Definitions
      At line 281 in file base.s
   Uses
      At line 47 in file base.s
      At line 225 in file base.s

ProcessTableEnd 0000018C

Symbol: ProcessTableEnd
   Definitions
      At line 285 in file base.s
   Uses
      At line 49 in file base.s
      At line 227 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 22 in file base.s
   Uses
      At line 16 in file base.s
Comment: Reset_Handler used once
SVCTable 0000018C

Symbol: SVCTable
   Definitions
      At line 287 in file base.s
   Uses
      At line 81 in file base.s
Comment: SVCTable used once
SVCTableEnd 000001A4

Symbol: SVCTableEnd
   Definitions
      At line 294 in file base.s
   Uses
      At line 83 in file base.s
Comment: SVCTableEnd used once
SVC_Create 00000088

Symbol: SVC_Create
   Definitions
      At line 119 in file base.s
   Uses
      At line 293 in file base.s
Comment: SVC_Create used once
SVC_Handler 0000003C

Symbol: SVC_Handler
   Definitions
      At line 68 in file base.s
   Uses
      At line 17 in file base.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: SVC_Handler used once
SVC_Kill 00000070

Symbol: SVC_Kill
   Definitions
      At line 98 in file base.s
   Uses
      At line 288 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 25 in file base.s
   Uses
      None
Comment: Start unused
Stop 0000017E

Symbol: Stop
   Definitions
      At line 275 in file base.s
   Uses
      At line 66 in file base.s
      At line 263 in file base.s
      At line 270 in file base.s
      At line 276 in file base.s

Switch 0000012E

Symbol: Switch
   Definitions
      At line 222 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 000001DE

Symbol: hellogalaxy
   Definitions
      At line 311 in file base.s
   Uses
      At line 256 in file base.s
Comment: hellogalaxy used once
hellomars 000001D1

Symbol: hellomars
   Definitions
      At line 308 in file base.s
   Uses
      At line 251 in file base.s
Comment: hellomars used once
helloworld 000001C3

Symbol: helloworld
   Definitions
      At line 305 in file base.s
   Uses
      At line 246 in file base.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: helloworld used once
osfinishing 000001BA

Symbol: osfinishing
   Definitions
      At line 302 in file base.s
   Uses
      At line 63 in file base.s
Comment: osfinishing used once
osrunning 000001AF

Symbol: osrunning
   Definitions
      At line 299 in file base.s
   Uses
      At line 38 in file base.s
Comment: osrunning used once
procoutofrangerr 000001ED

Symbol: procoutofrangerr
   Definitions
      At line 314 in file base.s
   Uses
      At line 261 in file base.s
Comment: procoutofrangerr used once
svcoutofrangerr 00000219

Symbol: svcoutofrangerr
   Definitions
      At line 317 in file base.s
   Uses
      At line 268 in file base.s
Comment: svcoutofrangerr used once
youlike 000001A4

Symbol: youlike
   Definitions
      At line 296 in file base.s
   Uses
      None
Comment: youlike unused
34 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ITM_Write 00000000

Symbol: ITM_Write
   Definitions
      At line 13 in file base.s
   Uses
      At line 213 in file base.s
Comment: ITM_Write used once
PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 291 in file base.s
Comment: PrintChar used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 289 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 39 in file base.s
      At line 292 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 15 in file base.s
   Uses
      At line 23 in file base.s
Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 12 in file base.s
   Uses
      None
Comment: fputc unused
7 symbols
376 symbols in table
