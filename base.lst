


ARM Macro Assembler    Page 1 


    1 00000000         ; Declare a code data AREA, which allows the linker 
    2 00000000         ; to allocate the code segment memory space 
    3 00000000         ; Name it Printer 
    4 00000000         
    5 00000000                 AREA             Printer, CODE, READONLY
    6 00000000         
    7 00000000         ; Import some routines from a library to allow printing 
                       
    8 00000000                 IMPORT           PrintHex
    9 00000000                 IMPORT           PrintString
   10 00000000                 IMPORT           PrintChar
   11 00000000                 IMPORT           PrintHello
   12 00000000                 IMPORT           fputc
   13 00000000                 IMPORT           PrintCharNoReturn
   14 00000000                 IMPORT           PrintStringNoReturn
   15 00000000         
   16 00000000                 IMPORT           SystemInit  ; link to C code 
   17 00000000                 EXPORT           Reset_Handler ; export the rese
                                                            t handler’s address
                                                             to C 
   18 00000000                 EXPORT           SVC_Handler
   19 00000000                 THUMB
   20 00000000                 PRESERVE8
   21 00000000         ENTRY                                ; indicate to the l
                                                            inker where to star
                                                            t the code 
   22 00000000         
   23 00000000         Reset_Handler                        ; also indicate whe
                                                            re to start 
   24 00000000 F7FF FFFE       BL               SystemInit  ; Invoke C code to 
                                                            configure the SoC c
                                                            orrectly 
   25 00000004         
   26 00000004         Start                                ; user code label f
                                                            or the start (optio
                                                            nal) 
   27 00000004         ;main
   28 00000004         
   29 00000004         ;initialise process stack 
   30 00000004 49AA            LDR              r1, =0x20010000
   31 00000006 F381 8809       MSR              PSP, r1
   32 0000000A         
   33 0000000A         ;initialise baseId
   34 0000000A F04F 0000       MOV              r0, #0
   35 0000000E B401            push{r0}                     ;push main id
   36 00000010 B402            push{r1}                     ;push last main sta
                                                            ck position
   37 00000012 B401            push{r0}                     ;push lastid
   38 00000014         
   39 00000014 F04F 0000       MOV              r0, #0      ;dummy print
   40 00000018 F7FF FFFE       BL               PrintChar
   41 0000001C         
   42 0000001C 48A5            LDR              r0, =osrunning
   43 0000001E F7FF FFFE       BL               PrintString ;we're still in han
                                                            dler mode, so we're
                                                             allowed to directl
                                                            y access print
   44 00000022         
   45 00000022 F000 F8B0       BL               Mode_Switch



ARM Macro Assembler    Page 2 


   46 00000026         
   47 00000026         ;MOV r0, #50012
   48 00000026         ;SVC 2
   49 00000026         
   50 00000026         ;MOV r0, #0xFFFFFFFF
   51 00000026         ;SVC 2
   52 00000026         
   53 00000026 49A4            LDR              r1, =ProcessTable ; initialise 
                                                            counter 
   54 00000028         ;LDR r2, =ProcessTable 
   55 00000028 4BA4            LDR              r3, =ProcessTableEnd
   56 0000002A         
   57 0000002A         MainLoopStart
   58 0000002A         
   59 0000002A         ;LDR r0, [r2, r1, LSL #2]
   60 0000002A 4299            CMP              r1, r3      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
   61 0000002C         ;BLGT Err_ProcessOutOfRange; if we're at an invalid proc
                       ess id, error out
   62 0000002C DA04            BGE              MainLoopEnd ; if we're at the e
                                                            nd of the table, fi
                                                            nish 
   63 0000002E 6808            LDR              r0, [r1]
   64 00000030 DF05            SVC              5
   65 00000032 F101 0104       ADD              r1, r1, #4  ; increment counter
                                                            
   66 00000036 E7F8            B                MainLoopStart
   67 00000038         MainLoopEnd
   68 00000038         
   69 00000038 48A1            LDR              r0, =osfinishing
   70 0000003A DF04            SVC              4
   71 0000003C         
   72 0000003C E0C1            B                Stop
   73 0000003E         
   74 0000003E         SVC_Handler
   75 0000003E         ;MOV r0, #0xbeef
   76 0000003E B500            PUSH{lr}
   77 00000040         ;BL PrintHex
   78 00000040 4603            MOV              r3, r0
   79 00000042         ;get SVC operand
   80 00000042 F01E 0F04       TST              lr, #4
   81 00000046 BF0C            ITE              eq          ; check which mode 
                                                            we came from
   82 00000048 F3EF 8008       MRSEQ            r0, MSP     ; load the relevant
                                                             stack pointer
   83 0000004C F3EF 8009       MRSNE            r0, PSP
   84 00000050 6981            LDR              r1, [r0, #24] ; stacked PC
   85 00000052 F811 1C02       LDRB             r1, [r1, #-2] ; get SVC instruc
                                                            tion’s operand
   86 00000056         
   87 00000056 4A9B            LDR              r2, =SVCTable
   88 00000058 F852 0021       LDR              r0, [r2, r1, LSL #2]
   89 0000005C 499A            LDR              r1, =SVCTableEnd
   90 0000005E 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table



ARM Macro Assembler    Page 3 


   91 00000060         ;PUSH{r0}
   92 00000060 BFC8 F000 
              F8AA             BLGT             Err_SVCOutOfRange
   93 00000066 4601            MOV              r1, r0
   94 00000068 4618            MOV              r0, r3
   95 0000006A 4788            BLX              r1
   96 0000006C         
   97 0000006C F85D EB04       POP{lr}
   98 00000070         ;MOV r2, #4
   99 00000070         ;POP{r0}
  100 00000070         ;MOV r0, #42
  101 00000070         ;PUSH{r0}
  102 00000070 4770            BX               lr
  103 00000072         
  104 00000072         SVC_Kill
  105 00000072 F04F 31FF       MOV              r1, #0xFFFFFFFF
  106 00000076 4288            CMP              r0, r1
  107 00000078 BF08 F000 
              F8A2             BLEQ             Stop
  108 0000007E BC01            pop{r0}                      ;pop lr from SVC_Ha
                                                            ndler
  109 00000080 BC02            pop{r1}                      ;pop id counter
  110 00000082 BC0C            pop{r2,          r3}         ; pop data about cu
                                                            rrent process, to t
                                                            hrow away
  111 00000084         
  112 00000084 4603            mov              r3, r0
  113 00000086 BC01            pop{r0}                      ; get current proce
                                                            ss stack pointer
  114 00000088 B402            push{r1}                     ; return id counter
                                                             to stack
  115 0000008A B408            push{r3}                     ;return lr
  116 0000008C         ;we are now done with the main stack 
  117 0000008C         
  118 0000008C         ;resume last process here
  119 0000008C         
  120 0000008C E8B0 0FF0       LDMFD            r0!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;restore other regi
                                                            sters
  121 00000090 4676            MOV              r6, lr
  122 00000092 4614            MOV              r4, r2
  123 00000094 F380 8809       MSR              PSP, r0     ; update PSP. there
                                                             is no longer any w
                                                            ay of recovering th
                                                            e old process direc
                                                            tly 
  124 00000098 488C            LDR              r0, =svckillprocess
  125 0000009A F7FF FFFE       BL               PrintStringNoReturn
  126 0000009E 4620            MOV              r0, r4
  127 000000A0 F000 F848       BL               PrintDecimal
  128 000000A4         ;normal recovery should now be in play
  129 000000A4 46B6            MOV              lr, r6
  130 000000A6 4770            BX               lr
  131 000000A8         
  132 000000A8         ;create the process addressed by r0
  133 000000A8         SVC_Create
  134 000000A8         ;get lr saved by previous
  135 000000A8 BC08            pop{r3}



ARM Macro Assembler    Page 4 


  136 000000AA         ;get the id
  137 000000AA BC02            pop{r1}
  138 000000AC F101 0101       ADD              r1, #1      ;r1 now contains my
                                                             id 
  139 000000B0         
  140 000000B0         
  141 000000B0         
  142 000000B0         ;work on the process stack
  143 000000B0 F3EF 8209       MRS              r2, PSP
  144 000000B4         ;MOV r4, #0x5464
  145 000000B4 E922 0FF0       STMFD            r2!, {r11, r10, r9, r8, r7, r6,
 r5, r4} 
                                                            ;push all remaining
                                                             registers to stack
                                                            
  146 000000B8         
  147 000000B8         ;r6 is saved, so we can reuse it
  148 000000B8 461E            MOV              r6, r3
  149 000000BA         
  150 000000BA F85D 9B04       pop{r9}                      ; dispose of the pr
                                                            evious stackpointer
                                                             for the *current* 
                                                            process
  151 000000BE         ;put the final sp in r2 
  152 000000BE B404            push{r2}                     ;update it 
  153 000000C0         
  154 000000C0 460C            MOV              r4, r1
  155 000000C2 4605            MOV              r5, r0      ;put new pc in r5
  156 000000C4 B500            push{lr}
  157 000000C6 4882            LDR              r0, =svccreateprocess
  158 000000C8 F7FF FFFE       BL               PrintStringNoReturn
  159 000000CC         
  160 000000CC 4620            MOV              r0, r4
  161 000000CE F000 F831       BL               PrintDecimal
  162 000000D2         
  163 000000D2 F85D EB04       pop{lr}
  164 000000D6 4621            MOV              r1, r4
  165 000000D8 4B75            LDR              r3, =0x20010000
  166 000000DA         
  167 000000DA F44F 74C8       MOV              r4, #400
  168 000000DE FB04 F401       MUL              r4, r4, r1
  169 000000E2         
  170 000000E2 EB03 0204       ADD              r2, r3, r4
  171 000000E6         
  172 000000E6 B406            push{r1,         r2}         ;add my id and init
                                                            ial sp (this value 
                                                            doesnt matter while
                                                             I'm running) to MS
                                                            P`
  173 000000E8 B402            push{r1}                     ;update the last id
                                                             value
  174 000000EA B440            push{r6}                     ;put the lr back
  175 000000EC         ;we are now done with updating the main stack
  176 000000EC         
  177 000000EC         ;work on the process stack
  178 000000EC         
  179 000000EC         ;at this point, 
  180 000000EC         ;0xFFFFFFFF default LR
  181 000000EC         ;0x01000000 default xPSR



ARM Macro Assembler    Page 5 


  182 000000EC F04F 7680       MOV              r6, #0x01000000 ; put default x
                                                            PSR value in r0 
  183 000000F0         ;put new pc in r5 (see above)
  184 000000F0 F04F 34FF       MOV              r4, #0xFFFFFFFF ; put default L
                                                            R value in r0
  185 000000F4 4617            MOV              r7, r2
  186 000000F6         ;reset remaining main registers
  187 000000F6 F04F 0000       MOV              r0, #0
  188 000000FA F04F 0100       MOV              r1, #0
  189 000000FE F04F 0200       MOV              r2, #0
  190 00000102 F04F 0300       MOV              r3, #0
  191 00000106         
  192 00000106         
  193 00000106 E927 0070       STMFD            r7!, {r6, r5, r4}
  194 0000010A         ; STMFD r7!, {r12, r6, r5, r4}
  195 0000010A E927 100F       STMFD            r7!, {r12, r3, r2, r1, r0}
  196 0000010E         ; STMFD r7!, {r0, r1, r2}
  197 0000010E F387 8809       MSR              PSP, r7     ;update the stack p
                                                            ointer
  198 00000112         
  199 00000112         ;reset all registers that won't be overwritten
  200 00000112 F04F 0400       MOV              r4, #0
  201 00000116 F04F 0500       MOV              r5, #0
  202 0000011A F04F 0600       MOV              r6, #0
  203 0000011E F04F 0700       MOV              r7, #0
  204 00000122 F04F 0800       MOV              r8, #0
  205 00000126 F04F 0900       MOV              r9, #0
  206 0000012A F04F 0A00       MOV              r10, #0
  207 0000012E F04F 0B00       MOV              r11, #0
  208 00000132         
  209 00000132         ;return to our newly created process, via the SVC_Handle
                       r
  210 00000132 4770            BX               lr
  211 00000134         
  212 00000134         
  213 00000134         PrintDecimal
  214 00000134 E92D 01D0       push{r4,         r6, r7, r8}
  215 00000138 F04F 020A       MOV              r2, #10
  216 0000013C         
  217 0000013C 466F            MOV              r7, sp      ;store original add
                                                            ress
  218 0000013E         
  219 0000013E         DecomposeStart
  220 0000013E         
  221 0000013E         ;establish last deciaml digit
  222 0000013E FBB0 F8F2       UDIV             r8, r0, r2
  223 00000142 FB08 F402       MUL              r4, r8, r2  ;get r0-r0%10
  224 00000146         ;subtract from origin number to get r0%10
  225 00000146 EBA0 0004       SUB              r0, r0, r4
  226 0000014A         ;push it
  227 0000014A B401            push{r0}
  228 0000014C         ;update r0 as r0/10
  229 0000014C 4640            MOV              r0, r8      ;
  230 0000014E         
  231 0000014E         ;if r0 = 0, we are done
  232 0000014E 2800            CMP              r0, #0
  233 00000150 D1F5            BNE              DecomposeStart
  234 00000152         
  235 00000152         DecomposeEnd



ARM Macro Assembler    Page 6 


  236 00000152 4676            MOV              r6, lr
  237 00000154         ;Note: we are guaranteed the above pushed at least once.
                        This is convenient
  238 00000154         DisplayStart
  239 00000154 BC01            pop{r0}
  240 00000156 F100 0030       ADD              r0, r0, #48
  241 0000015A F7FF FFFE       BL               PrintCharNoReturn ; TODO: updat
                                                            e with correct func
                                                            tion. Digits themse
                                                            lves are correct
  242 0000015E 46E8            MOV              r8, sp
  243 00000160 4547            CMP              r7, r8
  244 00000162 D1F7            BNE              DisplayStart
  245 00000164         DisplayEnd
  246 00000164 485B            LDR              r0, =newline
  247 00000166 F7FF FFFE       BL               PrintString
  248 0000016A 46B6            MOV              lr, r6
  249 0000016C E8BD 01D0       pop{r4,          r6, r7, r8}
  250 00000170 4770            BX               lr
  251 00000172         
  252 00000172         Switch                               ;put the address of
                                                             the corresponding 
                                                            process into r0
  253 00000172         ;POP{r0}
  254 00000172 4601            MOV              r1, r0      ;move the id, so we
                                                             can overwrite r0
  255 00000174 4A50            LDR              r2, =ProcessTable
  256 00000176 F852 0021       LDR              r0, [r2, r1, LSL #2]
  257 0000017A 4950            LDR              r1, =ProcessTableEnd
  258 0000017C 4288            CMP              r0, r1      ; compare the chose
                                                            n address with the 
                                                            final address of th
                                                            e table
  259 0000017E         ;PUSH{r0}
  260 0000017E BFC8 F000 
              F817             BLGT             Err_ProcessOutOfRange
  261 00000184 4770            BX               lr
  262 00000186         
  263 00000186         Mode_Switch
  264 00000186 F04F 0002       MOV              r0, #0x2    ; set stack to PSP 
                                                            
  265 0000018A F380 8814       MSR              CONTROL, r0 ; do it 
  266 0000018E F3BF 8F6F       ISB                          ; wait for it to be
                                                             done 
  267 00000192         
  268 00000192 F04F 0003       MOV              r0, #0x03   ; set privilege lev
                                                            el to User. 
  269 00000196         ; N.B. Cannot combine this to single MSR instruction wit
                       h 
  270 00000196         ; above PSP change when using RVDS ISSM!! 
  271 00000196 F380 8814       MSR              CONTROL, r0
  272 0000019A F3BF 8F6F       ISB
  273 0000019E 4770            BX               lr
  274 000001A0         
  275 000001A0         HelloWorld
  276 000001A0 484D            LDR              r0, =helloworld
  277 000001A2 DF04            SVC              4
  278 000001A4 DF00            SVC              0
  279 000001A6         



ARM Macro Assembler    Page 7 


  280 000001A6         HelloMars
  281 000001A6 484D            LDR              r0, =hellomars
  282 000001A8 DF04            SVC              4
  283 000001AA DF00            SVC              0
  284 000001AC         
  285 000001AC         HelloGalaxy
  286 000001AC 484C            LDR              r0, =hellogalaxy
  287 000001AE DF04            SVC              4
  288 000001B0 DF00            SVC              0
  289 000001B2         
  290 000001B2         Err_ProcessOutOfRange
  291 000001B2 484C            LDR              r0, =procoutofrangerr
  292 000001B4 DF04            SVC              4
  293 000001B6 F000 F804       BL               Stop
  294 000001BA         
  295 000001BA         
  296 000001BA         
  297 000001BA         Err_SVCOutOfRange
  298 000001BA 484B            LDR              r0, =svcoutofrangerr
  299 000001BC DF04            SVC              4
  300 000001BE F000 F800       BL               Stop
  301 000001C2         
  302 000001C2         ; ================ 
  303 000001C2         ; End your program 
  304 000001C2         ; ================ 
  305 000001C2         Stop
  306 000001C2 E7FE            B                Stop
  307 000001C4         
  308 000001C4         ; Declare some strings to be printed out 
  309 000001C4         ; These are constants and represent the data area 
  310 000001C4                 ALIGN
  311 000001C4         ProcessTable
  312 000001C4 00000000        DCD              HelloWorld
  313 000001C8 00000000        DCD              HelloMars
  314 000001CC 00000000        DCD              HelloGalaxy
  315 000001D0         ProcessTableEnd
  316 000001D0         
  317 000001D0         SVCTable
  318 000001D0 00000000        DCD              SVC_Kill
  319 000001D4 00000000        DCD              PrintHex
  320 000001D8 00000000        DCD              PrintDecimal ; fixme
  321 000001DC 00000000        DCD              PrintChar
  322 000001E0 00000000        DCD              PrintString
  323 000001E4 00000000        DCD              SVC_Create
  324 000001E8         SVCTableEnd
  325 000001E8         
  326 000001E8         youlike
  327 000001E8 59 6F 75 
              20 6C 69 
              6B 65 3A 
              20 00            DCB              "You like: ",0
  328 000001F3         
  329 000001F3         osrunning
  330 000001F3 4F 53 20 
              72 75 6E 
              6E 69 6E 
              67 00            DCB              "OS running",0
  331 000001FE         
  332 000001FE         osfinishing



ARM Macro Assembler    Page 8 


  333 000001FE 47 6F 6F 
              64 62 79 
              65 21 00         DCB              "Goodbye!",0
  334 00000207         
  335 00000207         helloworld
  336 00000207 48 65 6C 
              6C 6F 2C 
              20 77 6F 
              72 6C 64 
              21 00            DCB              "Hello, world!",0
  337 00000215         
  338 00000215         newline
  339 00000215 00              DCB              "",0
  340 00000216         
  341 00000216         hellomars
  342 00000216 48 65 6C 
              6C 6F 2C 
              20 6D 61 
              72 73 21 
              00               DCB              "Hello, mars!",0
  343 00000223         
  344 00000223         hellogalaxy
  345 00000223 48 65 6C 
              6C 6F 2C 
              20 67 61 
              6C 61 78 
              79 21 00         DCB              "Hello, galaxy!",0
  346 00000232         
  347 00000232         procoutofrangerr
  348 00000232 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 70 
              72 6F 63 
              65 73 73 
              20 69 64 
              20 69 73 
              20 6F 75 
              74 20 6F 
              66 20 72 
              61 6E 67 
              65 00            DCB              "Error: requested process id is
 out of range",0
  349 0000025E         
  350 0000025E         svcoutofrangerr
  351 0000025E 45 72 72 
              6F 72 3A 
              20 72 65 
              71 75 65 
              73 74 65 
              64 20 53 
              56 43 20 
              69 64 20 
              69 73 20 
              6F 75 74 
              20 6F 66 
              20 72 61 



ARM Macro Assembler    Page 9 


              6E 67 65 
              00               DCB              "Error: requested SVC id is out
 of range",0
  352 00000286         
  353 00000286         
  354 00000286         svccreateprocess
  355 00000286 43 72 65 
              61 74 69 
              6E 67 20 
              70 72 6F 
              63 65 73 
              73 20 23 
              00               DCB              "Creating process #",0
  356 00000299 00 00 00        ALIGN
  357 0000029C         
  358 0000029C         svckillprocess
  359 0000029C 4B 69 6C 
              6C 69 6E 
              67 20 70 
              72 6F 63 
              65 73 73 
              20 23 00         DCB              "Killing process #",0
  360 000002AE 00 00           ALIGN
  361 000002B0         
  362 000002B0         
  363 000002B0                 END
              20010000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bas
e.d -o.\base.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM
\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-list=.\base.lst base.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DecomposeEnd 00000152

Symbol: DecomposeEnd
   Definitions
      At line 235 in file base.s
   Uses
      None
Comment: DecomposeEnd unused
DecomposeStart 0000013E

Symbol: DecomposeStart
   Definitions
      At line 219 in file base.s
   Uses
      At line 233 in file base.s
Comment: DecomposeStart used once
DisplayEnd 00000164

Symbol: DisplayEnd
   Definitions
      At line 245 in file base.s
   Uses
      None
Comment: DisplayEnd unused
DisplayStart 00000154

Symbol: DisplayStart
   Definitions
      At line 238 in file base.s
   Uses
      At line 244 in file base.s
Comment: DisplayStart used once
ENTRY 00000000

Symbol: ENTRY
   Definitions
      At line 21 in file base.s
   Uses
      None
Comment: ENTRY unused
Err_ProcessOutOfRange 000001B2

Symbol: Err_ProcessOutOfRange
   Definitions
      At line 290 in file base.s
   Uses
      At line 260 in file base.s
Comment: Err_ProcessOutOfRange used once
Err_SVCOutOfRange 000001BA

Symbol: Err_SVCOutOfRange
   Definitions
      At line 297 in file base.s
   Uses
      At line 92 in file base.s
Comment: Err_SVCOutOfRange used once
HelloGalaxy 000001AC

Symbol: HelloGalaxy



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 285 in file base.s
   Uses
      At line 314 in file base.s
Comment: HelloGalaxy used once
HelloMars 000001A6

Symbol: HelloMars
   Definitions
      At line 280 in file base.s
   Uses
      At line 313 in file base.s
Comment: HelloMars used once
HelloWorld 000001A0

Symbol: HelloWorld
   Definitions
      At line 275 in file base.s
   Uses
      At line 312 in file base.s
Comment: HelloWorld used once
MainLoopEnd 00000038

Symbol: MainLoopEnd
   Definitions
      At line 67 in file base.s
   Uses
      At line 62 in file base.s
Comment: MainLoopEnd used once
MainLoopStart 0000002A

Symbol: MainLoopStart
   Definitions
      At line 57 in file base.s
   Uses
      At line 66 in file base.s
Comment: MainLoopStart used once
Mode_Switch 00000186

Symbol: Mode_Switch
   Definitions
      At line 263 in file base.s
   Uses
      At line 45 in file base.s
Comment: Mode_Switch used once
PrintDecimal 00000134

Symbol: PrintDecimal
   Definitions
      At line 213 in file base.s
   Uses
      At line 127 in file base.s
      At line 161 in file base.s
      At line 320 in file base.s

Printer 00000000

Symbol: Printer
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 5 in file base.s
   Uses
      None
Comment: Printer unused
ProcessTable 000001C4

Symbol: ProcessTable
   Definitions
      At line 311 in file base.s
   Uses
      At line 53 in file base.s
      At line 255 in file base.s

ProcessTableEnd 000001D0

Symbol: ProcessTableEnd
   Definitions
      At line 315 in file base.s
   Uses
      At line 55 in file base.s
      At line 257 in file base.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 23 in file base.s
   Uses
      At line 17 in file base.s
Comment: Reset_Handler used once
SVCTable 000001D0

Symbol: SVCTable
   Definitions
      At line 317 in file base.s
   Uses
      At line 87 in file base.s
Comment: SVCTable used once
SVCTableEnd 000001E8

Symbol: SVCTableEnd
   Definitions
      At line 324 in file base.s
   Uses
      At line 89 in file base.s
Comment: SVCTableEnd used once
SVC_Create 000000A8

Symbol: SVC_Create
   Definitions
      At line 133 in file base.s
   Uses
      At line 323 in file base.s
Comment: SVC_Create used once
SVC_Handler 0000003E

Symbol: SVC_Handler
   Definitions
      At line 74 in file base.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 18 in file base.s
Comment: SVC_Handler used once
SVC_Kill 00000072

Symbol: SVC_Kill
   Definitions
      At line 104 in file base.s
   Uses
      At line 318 in file base.s
Comment: SVC_Kill used once
Start 00000004

Symbol: Start
   Definitions
      At line 26 in file base.s
   Uses
      None
Comment: Start unused
Stop 000001C2

Symbol: Stop
   Definitions
      At line 305 in file base.s
   Uses
      At line 72 in file base.s
      At line 107 in file base.s
      At line 293 in file base.s
      At line 300 in file base.s
      At line 306 in file base.s

Switch 00000172

Symbol: Switch
   Definitions
      At line 252 in file base.s
   Uses
      None
Comment: Switch unused
hellogalaxy 00000223

Symbol: hellogalaxy
   Definitions
      At line 344 in file base.s
   Uses
      At line 286 in file base.s
Comment: hellogalaxy used once
hellomars 00000216

Symbol: hellomars
   Definitions
      At line 341 in file base.s
   Uses
      At line 281 in file base.s
Comment: hellomars used once
helloworld 00000207

Symbol: helloworld
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 335 in file base.s
   Uses
      At line 276 in file base.s
Comment: helloworld used once
newline 00000215

Symbol: newline
   Definitions
      At line 338 in file base.s
   Uses
      At line 246 in file base.s
Comment: newline used once
osfinishing 000001FE

Symbol: osfinishing
   Definitions
      At line 332 in file base.s
   Uses
      At line 69 in file base.s
Comment: osfinishing used once
osrunning 000001F3

Symbol: osrunning
   Definitions
      At line 329 in file base.s
   Uses
      At line 42 in file base.s
Comment: osrunning used once
procoutofrangerr 00000232

Symbol: procoutofrangerr
   Definitions
      At line 347 in file base.s
   Uses
      At line 291 in file base.s
Comment: procoutofrangerr used once
svccreateprocess 00000286

Symbol: svccreateprocess
   Definitions
      At line 354 in file base.s
   Uses
      At line 157 in file base.s
Comment: svccreateprocess used once
svckillprocess 0000029C

Symbol: svckillprocess
   Definitions
      At line 358 in file base.s
   Uses
      At line 124 in file base.s
Comment: svckillprocess used once
svcoutofrangerr 0000025E

Symbol: svcoutofrangerr
   Definitions
      At line 350 in file base.s
   Uses
      At line 298 in file base.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: svcoutofrangerr used once
youlike 000001E8

Symbol: youlike
   Definitions
      At line 326 in file base.s
   Uses
      None
Comment: youlike unused
37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PrintChar 00000000

Symbol: PrintChar
   Definitions
      At line 10 in file base.s
   Uses
      At line 40 in file base.s
      At line 321 in file base.s

PrintCharNoReturn 00000000

Symbol: PrintCharNoReturn
   Definitions
      At line 13 in file base.s
   Uses
      At line 241 in file base.s
Comment: PrintCharNoReturn used once
PrintHello 00000000

Symbol: PrintHello
   Definitions
      At line 11 in file base.s
   Uses
      None
Comment: PrintHello unused
PrintHex 00000000

Symbol: PrintHex
   Definitions
      At line 8 in file base.s
   Uses
      At line 319 in file base.s
Comment: PrintHex used once
PrintString 00000000

Symbol: PrintString
   Definitions
      At line 9 in file base.s
   Uses
      At line 43 in file base.s
      At line 247 in file base.s
      At line 322 in file base.s

PrintStringNoReturn 00000000

Symbol: PrintStringNoReturn
   Definitions
      At line 14 in file base.s
   Uses
      At line 125 in file base.s
      At line 158 in file base.s

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 16 in file base.s
   Uses
      At line 24 in file base.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: SystemInit used once
fputc 00000000

Symbol: fputc
   Definitions
      At line 12 in file base.s
   Uses
      None
Comment: fputc unused
8 symbols
380 symbols in table
